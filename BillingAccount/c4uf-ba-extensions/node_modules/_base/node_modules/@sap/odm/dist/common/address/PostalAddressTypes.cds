namespace sap.odm.common.address;

using { sap.odm.common.address.StreetCode } from './StreetCodes.cds';
using {
  sap.odm.common.address.SecondaryRegionCode,
  sap.odm.common.address.TertiaryRegionCode
} from './RegionCodes.cds';
using { sap.odm.common.address.CountrySubdivisionCode } from './CountrySubdivisionCodes.cds';
using { sap.odm.common.address.TownCode } from './TownCodes.cds';
using { sap.odm.common.address.DistrictCode } from './DistrictCodes.cds';
using { sap.odm.common.CountryCode } from '../CountryCodes.cds';
using { sap.odm.common.address.DeliveryTypeCode } from './DeliveryTypeCodes.cds';
using { sap.odm.common.address.s4.PostalAddress as S4PostalAddress } from './s4/PostalAddressTypes.cds';
using { sap.odm.common.GeoCoordinates } from '../types.cds';
using { sap.odm.common.TimeZoneCode } from '../TimeZoneCodes.cds';

/**
 * Links the name of a street to an optional Thoroughfare code
 * as defined by ISO 19160-4:2017.
 */
type Street: {
  /**
   * Name of a street.
   */
  name: String(256);
  /**
   * Code of a street.
   */
  ref: StreetCode;
};

/**
 * Thoroughfare as defined by ISO 19160-4:2017
 * (road/street/square/.. defining a way to the addressed
 * object). Note: the definition is not quite compliant to ISO
 * 19160-4:2017, the latter defines three structural levels.
 * This modeling is in accordance with NW business address
 * services: Combination of two street prefixes and two street
 * suffixes provides sufficient flexibility to encode country
 * specific address fields, like Moo and Soi for Thailand.
 */
type StreetInfo: {
  /**
   * Defines first line of the street print layout.
   */
  streetPrefix1: String(256);
  /**
   * Defines second line of the street print layout.
   */
  streetPrefix2: String(256);
  /**
   * Paired {name,code} type.
   */
  street: Street;
  /**
   * Defines before-last line of the street print layout.
   */
  streetSuffix1: String(256);
  /**
   * Defines last line of the street print layout.
   */
  streetSuffix2: String(256);
};

/**
 * Premises as defined by ISO 19160-4:2017 (location of
 * addressed object).
 */
type PremisesInfo: {
  /**
   * Building where the addressed object resides.
   */
  houseNumber: String(256);
  /**
   * Additional information.
   */
  houseNumberSupplement: String(256);
};

/**
 * Addressed object as defined ISO 19160-4:2017.
 */
type AddressedObjectInfo: {
  /**
   * Floor information.
   */
  floor: String(256);
  /**
   * Room, apartment, ...
   */
  door: String(256);
  /**
   * A care of (c/o) party name.
   */
  careOf: String(256);
};

/**
 * Links the name of a secondary region to an optional Region
 * Code.
 */
type SecondaryRegion: {
  /**
   * Name of a secondary region.
   */
  name: String(256);
  /**
   * Code of a secondary region.
   */
  ref: SecondaryRegionCode;
};

/**
 * Links the name of a tertiary region to an optional Region
 * Code.
 */
type TertiaryRegion: {
  /**
   * Name of a tertiary region.
   */
  name: String(256);
  /**
   * Code of a tertiary region.
   */
  ref: TertiaryRegionCode;
};

/**
 * Region is an addressable area in a Country. Contain two
 * levels (primary, like province, and secondary, like
 * department). While primary is in all cases be expressed by
 * ISO 3166-2 (subdivision) codes, secondary can also be
 * locally regulated (codelist defined by a local governance)
 * or not regulated at all. Note: Primary and secondary is not
 * really correct in terms of ISO 19160-4; it defines "levels"
 * without limiting the number of them, but pragmatically two
 * levels seems to be sufficient.
 */
type RegionInfo: {
  /**
   * Code list with codes that are _derived_ from subdivisions. A
   * region for postal must provide a disjoint cut, in ISO 3166-2
   * it is not always the case (e.g. France 14 provinces, 95
   * departments, departments intersect with provinces). This
   * means that additional work must be invested in curation of
   * ISO 3166-2 code lists. So, while formally it the field type
   * is ISO subdivision code, in fact it is a curated subset of
   * ISO 3166-2, prepared for use in postal delivery.
   */
  primaryRegion: CountrySubdivisionCode;
  /**
   * locally governed region name second level, optionally
   * codelist item.
   */
  secondaryRegion: SecondaryRegion;
  /**
   * locally governed region name third level (e.g. Russia),
   * optionally codelist item.
   */
  tertiaryRegion: TertiaryRegion;
};

/**
 * Links a town name to an optional Town Code as defined in ISO
 * 19160-4:2017.
 */
type Town: {
  /**
   * Name of a town.
   */
  name: String(256);
  /**
   * Code of a town.
   */
  ref: TownCode;
};

/**
 * Links the name of a district to an optional District Code as
 * defined in ISO 19160-4:2017.
 */
type District: {
  /**
   * Name of a district.
   */
  name: String(256);
  /**
   * Code of a district.
   */
  ref: DistrictCode;
};

/**
 * Locality as defined by ISO 19160-4:2017.
 */
type LocalityInfo: RegionInfo {
  /**
   * City, town, village; a value from a codelist for towns; see
   * ISO 19160-4 definition.
   */
  town: Town;
  /**
   * An addressable area inside of a town; see ISO 19160-4
   * definition: optional.
   */
  district: District;
};

/**
 * Type to define maximum length of string representation of
 * postal codes.
 */
type PostalCode: String(10);

/**
 * Locality address is a technical reusable part for addresses
 * of different types. In each case of delivery, correspondence
 * must be delivered to a locality and then from there either
 * to a physical address of a service point address.
 */
type CountryLevelInfo: {
  /**
   * A value from a codelist for countries.
   */
  country: CountryCode;
  /**
   * Postal code (or Zip Code in the US, PLZ in Germany etc.).
   */
  postCode: PostalCode;
};

/**
 * Physical delivery address describes a destination for a
 * postal delivery to a physical address.
 */
type PhysicalDeliveryAddress: StreetInfo, PremisesInfo, AddressedObjectInfo, LocalityInfo, CountryLevelInfo {};

/**
 * Delivery service types that identify delivery locations
 * other than the ordinary mailbox or personal deliveries.
 */
@ODM.deprecated: 'Use DeliveryTypeCode instead'
type DeliveryServiceEnum: String(64) enum {
  POBoxDelivery;
  PrivateBagDelivery;
  PosteRestanteDelivery;
  CompanyDelivery;
  WorkerCampElectricityMeterDelivery;
  WorkerCampBedDelivery;
  Other;
} ;

/**
 * An alternative delivery address that does not have region,
 * street, premises, and addressed object information but
 * identifies delivery locations according to the service enum
 * type.
 */
type AlternativeDeliveryAddress: CountryLevelInfo, LocalityInfo {
  /**
   * A codelist containing a discriminator to select between
   * address types.
   */
  deliveryType: DeliveryTypeCode;
  /**
   * A codelist containing a discriminator to select between
   * address types.
   */
  @ODM.deprecated: 'Use deliveryType instead'
  deliveryServiceType: DeliveryServiceEnum;
  /**
   * E.g. Post Office SouthEast. Needed as the same service
   * identifier is only unique within the scope of the qualifier
   * (i.e. same identifier could be used in different Post
   * offices in the same town).
   */
  deliveryServiceQualifier: String(256);
  /**
   * Identifier of the delivery service, e.g., the number of the
   * PO Box. Unique within the scope of the
   * deliveryServiceQualifier.
   */
  deliveryServiceIdentifier: String(256);
};

/**
 * Postal address describes a destination for a postal
 * delivery. It may be either a physical address or a service
 * point address (e.g. PO box). The types are described in a
 * codelist "DeliveryServiceEnum".
 */
type PostalAddress: PhysicalDeliveryAddress, S4PostalAddress {
  /**
   * Another type of address (e.g. service point delivery like PO
   * box).
   */
  alternative: AlternativeDeliveryAddress;
  /**
   * The address as geo coordinates.
   */
  coordinates: GeoCoordinates;
  /**
   * The time zone of the destination.
   */
  timeZone: TimeZoneCode;
};
