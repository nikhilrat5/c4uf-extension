namespace sap.odm.workforce;

using { sap.odm.orgunit.CompanyCodeId } from '../orgunit/CompanyCode.cds';
using { sap.odm.workforce.foundation.JobClassification } from './foundation/JobClassification.cds';
using {
  sap.odm.workforce.WorkforcePerson,
  sap.odm.workforce.ScriptedPersonAddress
} from './WorkforcePerson.cds';
using { sap.odm.workforce.foundation.OrganizationalUnit } from './foundation/OrganizationalUnit.cds';
using {
  sap.odm.workforce.common.JobDetailStatusCode,
  sap.odm.workforce.common.EventCode,
  sap.odm.workforce.common.EventReasonCode,
  sap.odm.workforce.common.EmployeeClassCode,
  sap.odm.workforce.common.PaymentTypeCode,
  sap.odm.workforce.common.PaymentMethodCode,
  sap.odm.workforce.common.BankAccountTypeCode,
  sap.odm.workforce.common.BankControlKeyCode,
  sap.odm.workforce.common.AddressUsageCode
} from './common/WorkforceCodelists.cds';
using { sap.odm.finance.costobject.CostCenter } from '../finance/costobject/CostCenter.cds';
using { sap.odm.common.CountryCode } from '../common/CountryCodes.cds';
using { sap.odm.finance.payment.PaymentDetailsBaseType } from '../finance/payment/PaymentDetail.cds';

/**
 * Defines the primary assignment at any given point in time.
 */
type WorkAssignmentDetails: {
  /**
   * Defines a work assignment as primary.
   */
  isPrimary: Boolean;
};

/**
 * Company code reference type.
 */
type CompanyCodeAssociation: {
  /**
   * Company code Id of work assignment.
   */
  externalId: CompanyCodeId not null;
};

/**
 * Job code used in SAP SuccessFactors; domain-specific
 * language.
 */
type JobClassificationAssociation: {
  /**
   * External identifier for Job Classification.
   */
  externalId: String(128);
  /**
   * An association to Job Classification entity.
   */
  ref: association to one JobClassification;
};

/**
 * Reference to the WorkAssignment sub-entity.
 */
type WorkAssignmentRef: {
  /**
   * The id of the WorkAssignment.
   */
  id: String(100);
  /**
   * The external id of the WorkAssignment.
   */
  externalId: String(100);
  /**
   * The reference to the WorkforcePerson.
   */
  workforcePerson: association to one WorkforcePerson;
};

/**
 * A type that references a Position entity in SAP
 * SuccessFactors through a unique externalId.
 */
type PositionRef: {
  /**
   * ID for a position from SAP SuccessFactors.
   */
  externalId: String(128);
};

/**
 * A type that references a Location entity in SAP
 * SuccessFactors through a unique externalId.
 */
type LocationRef: {
  /**
   * ID for a location entity from SAP SuccessFactors.
   */
  externalId: String(128);
};

/**
 * Organizational unit reference type.
 */
type OrganizationalUnitAssociation: {
  /**
   * External identifier of organizational unit.
   */
  externalId: String(128);
  /**
   * An association to Organizational Unit entity.
   */
  ref: association to one OrganizationalUnit;
};

/**
 * Stores information about worker's job. One work assignment
 * belongs to one country. Workers can be filtered based on
 * company code and country.
 */
type JobDetails: {
  /**
   * Status of the worker's job.
   */
  status: JobDetailStatusCode not null;
  /**
   * Company Code associated with the job.
   */
  legalEntity: CompanyCodeAssociation;
  /**
   * The cost center to which costs are allocated.
   */
  costCenter: association to one CostCenter;
  /**
   * Full time employee (FTE).
   */
  fte: Decimal(3, 2);
  /**
   * Working hours per week.
   */
  workingHoursPerWeek: Decimal(5, 2);
  /**
   * Working days per week.
   */
  workingDaysPerWeek: Decimal(3, 2);
  /**
   * The job classification that indicates the employee's
   * occupation or work.
   */
  job: JobClassificationAssociation;
  /**
   * A name that identifies an employeeâ€™s job.
   */
  jobTitle: String(256);
  /**
   * Supervisor work assignment.
   */
  supervisorWorkAssignment: WorkAssignmentRef;
  /**
   * The country or region where employees perform their job or
   * assignment.
   */
  country: CountryCode not null;
  /**
   * A code that indicates a specific change to JobDetails.
   */
  event: EventCode;
  /**
   * A specific reason that triggers an event.
   */
  eventReason: EventReasonCode;
  /**
   * A serial number that indicates the chronological order of
   * the event within a given day.
   */
  eventSequence: Integer;
  /**
   * Position entity in SAP SuccessFactors.
   */
  position: PositionRef;
  /**
   * Location entity in SAP SuccessFactors.
   */
  location: LocationRef;
  /**
   * This field indicates the type of employee.
   */
  employeeClass: EmployeeClassCode;
  /**
   * Lowest grouping level. Corresponds to department in SAP
   * SuccessFactors. This is filled by division or business unit
   * in case customer does not use all levels.
   */
  orgUnit: OrganizationalUnitAssociation;
  /**
   * Second level of grouping. Corresponds to division in SAP
   * SuccessFactors.
   */
  superOrdinateOrgUnit1: OrganizationalUnitAssociation;
  /**
   * Topmost level of grouping. Corresponds to business unit in
   * SAP SuccessFactors.
   */
  superOrdinateOrgUnit2: OrganizationalUnitAssociation;
};

/**
 * Payment details required by SAP S/4HANA Finance for payment
 * file generation.
 */
type PaymentDetails: PaymentDetailsBaseType {
  /**
   * Type of the payment, e.g. travel expenses.
   */
  paymentType: PaymentTypeCode not null;
  /**
   * Payment methods, e.g. bank transfer, check, cash.
   */
  paymentMethod: PaymentMethodCode not null;
  /**
   * Business identifier code (BIC); also known as Society for
   * Worldwide Interbank Financial Telecommunication (SWIFT).
   */
  businessIdentifierCode: String(11);
  /**
   * Bank account type.
   */
  bankAccountType: BankAccountTypeCode;
  /**
   * Bank control key.
   */
  bankControlKey: BankControlKeyCode;
};

/**
 * A type that describes supplier attributes.
 */
type SupplierAssociation: {
  /**
   * External business partner ID for the supplier.
   */
  externalId: String(10) not null;
};

/**
 * Work order details.
 */
type WorkOrderDetails: {
  /**
   * External business partner for supplier.
   */
  supplier: SupplierAssociation;
};

/**
 * Private addresses of work assignment.
 */
type WorkAssignmentPrivateAddress: ScriptedPersonAddress {
  /**
   * Code that specifies the usage context of the work assignment
   * private address.
   */
  usage: AddressUsageCode;
};

/**
 * This is a root entity below workers. You can store
 * references and directly access work assignments. Each work
 * assignment represents a specific work relationship to a
 * company or legal entity. Not all consumers know the work
 * assignment concept and multiple work assignments can be
 * valid at the same time. For these consumers, WBS (work
 * breakdown structure) provides a primary work assignment
 * relationship. In case of global assignment, rehire, and
 * international transfer we recommend to create a new
 * assignment. For payroll-relevant systems, a new work
 * assignment must be created for every country the person is
 * contracted in.
 */
@PersonalData.EntitySemantics: 'Other'
aspect WorkAssignment {
  /**
   * Unique identifier of work assignment.
   */
  key id: String(100) not null;
  /**
   * External ID of work assignment.
   */
  externalId: String(100) not null;
  /**
   * Defines a worker as contingent worker.
   */
  isContingentWorker: Boolean;
  /**
   * Start date of work assignment.
   */
  startDate: Date not null;
  /**
   * End date of work assignment.
   */
  endDate: Date;
  /**
   * Details of work assignment.
   */
  @odm.temporalDate: true
  detail: WorkAssignmentDetails;
  /**
   * Job details.
   */
  @odm.temporalDate: true
  jobDetails: many JobDetails;
  /**
   * Payment details of work assignment.
   */
  @PersonalData.IsPotentiallySensitive: true
  @odm.temporalDate: true
  paymentDetails: many PaymentDetails;
  /**
   * Work order details of work assignment.
   */
  @odm.temporalDate: true
  workOrderDetail: WorkOrderDetails;
  /**
   * Private addresses of work assignment.
   */
  @odm.temporalDate: true
  privateAddresses: many WorkAssignmentPrivateAddress;
};
