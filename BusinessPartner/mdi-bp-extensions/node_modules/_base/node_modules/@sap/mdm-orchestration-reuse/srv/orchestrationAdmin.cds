namespace mdo;

using mdo.DistributionStatus as DistributionStatus from '../db/DistributionStatusModel';
using mdo.BusinessLogRecord as BusinessLogRecord from '../db/DistributionStatusModel';
using mdo.DistributionStatusTmpl as DistributionStatusTmpl from '../db/DistributionStatusModel';
using mdo.ChangePointer as ChangePointer from '../db/ChangePointerModel';
using mdo.DependentObjectChangePointer as DependentObjectChangePointer from '../db/ChangePointerModel';
using mdo.ApplicationDestination as ApplicationDestination from '../db/ApplicationDestination';

using mdo.ObjectTypeOwner as ObjectTypeOwner from '../db/ObjectTypeOwnerModel';
using cds.foundation.sap.businessobjecttype.ObjectType as ObjectType from '@sap/reusemodel-businessobjecttype/db/BusinessObjectTypeModel';

using mdo.KeyMappingDistributionStatusOverviewTmpl as KeyMappingDistributionStatusOverviewTmpl from '../db/LocateObjectModel';
using mdo.KeyMappingDistributionStatusDetailTmpl as KeyMappingDistributionStatusDetailTmpl from '../db/LocateObjectModel';
using mdo.DistributionStatusSummary as DistributionStatusSummary from '../db/LocateObjectModel';
using mdo.DistributionStatusSummaryOverview as DistributionStatusSummaryOverview from '../db/LocateObjectModel';
using mdo.LastDistributionStatus as LastDistributionStatus from '../db/LocateObjectModel';
using mdo.ValueHelp as ValueHelp from '../db/ValueHelpModel';

service orchestrationAdmin @(requires: 'any'){
	
	@Capabilities.SearchRestrictions.Searchable: true
	@Capabilities: { Insertable:false, Updatable:false, Deletable:false }
	entity DistributionStatuses as projection on DistributionStatusTmpl ;

	@Capabilities: { Insertable:false, Updatable:false, Deletable:false }
	entity BusinessLogRecords as projection on mdo.BusinessLogRecord;
	
	@Capabilities: { Insertable:false, Updatable:false, Deletable:false }
	entity ChangePointers as projection on ChangePointer;

	@Capabilities: { Insertable:false, Updatable:false, Deletable:false }
	entity DependentObjectChangePointers as projection on DependentObjectChangePointer;

	@Capabilities: { Insertable:false, Updatable:false, Deletable:false }
	entity OverviewKeyMappingDistributionStatus as projection on KeyMappingDistributionStatusOverviewTmpl excluding{ to_GroupMember };
	
	@Capabilities: { Insertable:false, Updatable:false, Deletable:false}
	entity DistributionStatusSummaries as projection on DistributionStatusSummaryOverview;

	@Capabilities: { Insertable:false, Updatable:false, Deletable:false }
	entity DetailKeyMappingDistributionStatus as projection on KeyMappingDistributionStatusDetailTmpl;
	
	@Capabilities: { Insertable:false, Updatable:false, Deletable:false }
	entity LastDistributionStatuses as projection on LastDistributionStatus;
	
	@Capabilities: { Insertable:false, Updatable:false, Deletable:false }
	entity ApplicationDestinations as projection on ApplicationDestination;
    
    @Capabilities: { Insertable:false, Updatable:false, Deletable:false }
    entity ValueHelps as projection on ValueHelp;
	
	@Capabilities: { Insertable:false, Updatable:false, Deletable:false }
	entity ObjectTypeOwners as projection on ObjectTypeOwner{
		*,
		To_BusinessObjectType: redirected to ObjectTypes
	}excluding {
		To_BusinessObjectType
	};
		
	@Capabilities: { Insertable:false, Updatable:false, Deletable:false }
	view ObjectTypes as select from ObjectType {
		key objectTypeCode,
		key BusConfignVersion,
		businessObject,
		isProjection,
		mainObject,		
		description[language=SUBSTRING(SESSION_CONTEXT('LOCALE'),1,2)].description as localizedDescription
    } where mainObject is null or mainObject = '';

	@Capabilities: { Insertable:false, Updatable:false, Deletable:false }
	view DistributionStatusStatistics as select from DistributionStatus{
		key DistributionModel as DistributionModelId,
		key ReplicationStatus,
		count(*) as StatusCount: Integer
	} group by DistributionModel, ReplicationStatus;

	function updateModel(modelId:String, username:String) returns Boolean;

	function updateObjectTypeOwnership(otc:String) returns Boolean;

	function triggerReplication(modelId:String) returns Boolean;

	function triggerInitialReplication(modelId:String, consumerDestinationName:String, applicationScopeChanged:Boolean,
	                                   distributionScopeChanged:Boolean, username:String) returns Boolean;

	function addHocReplication(modelId:String, destination:String, username:String) returns Boolean;

	function errorResolution(modelId:String, providerDestinationName:String, username:String) returns Boolean;

	function startReplication(tenantId:String, tenantHost:String) returns Boolean;
	
	function startCleanUpReport(tenantId:String) returns Boolean;
	
	function triggerRedistribution(modelId: String, username: String, boTypeCode: String, destination: String, distributionStatus: String, instanceKey: String) returns Boolean;
}
