namespace mdo;

using mdo.SubscriptionDistribution as SubscriptionDistribution from '../db/SubscriptionDistributionModel';
using mdo.Description as Description from '../db/SubscriptionDistributionModel';
using mdo.ApplicationScope as ApplicationScope from '../db/SubscriptionDistributionModel';
using mdo.DistributionScope as DistributionScope from '../db/SubscriptionDistributionModel';
using mdo.ApplicationType as ApplicationType from '../db/ApplicationTypeModel';
using mdo.ConsumerApplicationType as ConsumerApplicationType from '../db/ApplicationTypeModel';
using mdo.KeyMappingFilter as KeyMappingFilter from '../db/SubscriptionDistributionModel';
using mdo.ProviderApplicationDestination as ProviderApplicationDestination from '../db/SubscriptionDistributionModel';
using mdo.ConsumerApplication as ConsumerApplication from '../db/SubscriptionDistributionModel';
using mdo.ApplicationDestination as ApplicationDestination from '../db/ApplicationDestination';
using mdo.ObjectIdentifierType as ObjectIdentifierType from '../db/ObjectIdentifierTypeModel';
using mdo.ObjectIdentifierTypeText as ObjectIdentifierTypeText from '../db/ObjectIdentifierTypeModel';
using mdo.DependentObjectAPI as DependentObjectAPI from '../db/ApiEntitySetModel';
using mdo.API as API from '../db/ApiEntitySetModel';
using mdo.ValueHelp as ValueHelp from '../db/ValueHelpModel';
using cds.foundation.sap.language.Languages as LanguageCodes from '@sap/reusemodel-language/db/data-model';
using cds.foundation.sap.language.LanguageTexts as LanguageCodeTexts from '@sap/reusemodel-language/db/data-model';
using cds.foundation.sap.businessobjecttype.ObjectType as ObjectType from '@sap/reusemodel-businessobjecttype/db/BusinessObjectTypeModel';
using cds.foundation.sap.businessobjecttype.ObjectTypeText as ObjectTypeText from '@sap/reusemodel-businessobjecttype/db/BusinessObjectTypeModel';
using mdo.ConsumerApplicationToPurpose as ConsumerApplicationToPurpose from '../db/SubscriptionDistributionModel';
using mdo.Purpose as Purpose from '../db/SubscriptionDistributionModel';

service manageDistributions {

    @Capabilities: { Insertable:false, Updatable:false, Deletable:false }
    entity Languages as projection on LanguageCodes{
        key LanguageTwoLetterISOCode,
        BusConfignVersion,
        localised.LanguageName as description,
        localised.LanguageTextLanguageCode        
    };

    @Capabilities: { Insertable:false, Updatable:false, Deletable:false }
    entity LanguageTexts as projection on LanguageCodeTexts;

    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities.FilterRestrictions.NonFilterableProperties: [To_LocalizedDescription, BusinessObjectType]
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true }
    @odata.draft.enabled : true
    view SubscriptionDistributions as select from SubscriptionDistribution {
    	*,
    	To_API,
    	BusinessObjectType: redirected to ObjectTypes,
    	To_Description: redirected to Descriptions,
    	To_LocalizedDescription: redirected to Descriptions,
    	null as IsEditable: Boolean,
        null as IsActivable: Boolean,
    	null as IsDeactivable: Boolean,
    	null as IsDeletable : Boolean
    } excluding {
    	ProviderApplicationTypeVersion,
    	ProviderApplicationType,
    	Confirmation,
    	To_Description,
    	To_LocalizedDescription
    };

    @Capabilities.SearchRestrictions.Searchable: false
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true } 
    entity Descriptions as select from Description {
			*,
			To_Language : redirected to Languages
    };

    @Capabilities: { Insertable:true, Updatable:true, Deletable:true }
    entity ApplicationScopes as projection on ApplicationScope;

    @Capabilities: { Insertable:true, Updatable:true, Deletable:true }
    entity DistributionScopes as projection on DistributionScope;

    @Capabilities: { Insertable:true, Updatable:true, Deletable:true }
    entity KeyMappingFilters as projection on KeyMappingFilter{
    		*
    }; 

    @Capabilities.SearchRestrictions.Searchable: false
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true }
    entity ProviderApplicationDestinations as projection on ProviderApplicationDestination;     
            
    @Capabilities.SearchRestrictions.Searchable: false
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true }
    entity ConsumerApplications as projection on ConsumerApplication{ 
    	*,
    	To_ApplicationType: redirected to ApplicationTypes
    };

	@Capabilities: { Insertable:false, Updatable:false, Deletable:false }
	view ObjectTypes as select from ObjectType {
		key objectTypeCode,
		key BusConfignVersion,
		businessObject,
		isProjection,
		mainObject,
        localizedDescription.description as localizedDescription,
		//description[language=SUBSTRING(SESSION_CONTEXT('LOCALE'),1,2)].description as localizedDescription,
		To_Projections: redirected to AllObjectTypes,
		To_AssociatedObjectTypes: redirected to AllObjectTypes
	} where mainObject is null or mainObject = '';
 	
	@Capabilities: { Insertable:false, Updatable:false, Deletable:false }
	entity AllObjectTypes as projection on ObjectType{
		*
    } excluding {
    	To_Projections,
    	To_AssociatedObjectTypes
    };

	@Capabilities: { Insertable:false, Updatable:false, Deletable:false }
	view ApplicationTypes as select from ApplicationType {
		key ApplicationTypeCode,
		LocalizedDescription.Description
	};

    //@Capabilities: { Insertable:false, Updatable:false, Deletable:false }
    entity ObjectTypeDescriptions as projection on  ObjectTypeText;
    
    @Capabilities: { Insertable:false, Updatable:false, Deletable:false }
    entity ObjectIdentifierTypes as projection on  ObjectIdentifierType;
    
    @Capabilities: { Insertable:false, Updatable:false, Deletable:false }
    entity ObjectIdentifierTypeTexts as projection on  ObjectIdentifierTypeText;
    
	@Capabilities: { Insertable:false, Updatable:false, Deletable:false }
	entity ProviderDestinations as projection on ApplicationDestination {
		*
	};
	
	@Capabilities: { Insertable:false, Updatable:false, Deletable:false }
	entity ConsumerDestinations as projection on ApplicationDestination {
    *
	};

    @Capabilities: { Insertable:false, Updatable:false, Deletable:false }
    entity ConsumerApplicationTypes as projection on ConsumerApplicationType; 

    @Capabilities: { Insertable:false, Updatable:false, Deletable:false }
    entity ValueHelps as projection on ValueHelp;

  @Capabilities: { Insertable:false, Updatable:false, Deletable:false }
  view APIs as select from API {
    Id,
    API,
    APIVersion,
    To_DependentObjectAPI
  };

  @Capabilities.SearchRestrictions.Searchable: false
  @Capabilities: { Insertable:false, Updatable:false, Deletable:false }
  view DependentObjectAPIs as select from DependentObjectAPI {
    *,
    To_BusinessObjectType: redirected to ObjectTypes
  };

  annotate DependentObjectAPIs with @(restrict: [
    { grant: ['READ'], to: 'MDOModelMaintain' },
    { grant: ['READ'], to: 'MDOModelDisplay' }
  ]);

  @Capabilities: { Insertable:true, Updatable:true, Deletable:true }
  entity ConsumerApplicationToPurposes as projection on ConsumerApplicationToPurpose;

  @Capabilities: { Insertable:true, Updatable:false, Deletable:false }
  entity Purposes as projection on Purpose;

	action copyModel(modelId:String) returns SubscriptionDistributions;

	action checkDraftData(Id:UUID, IsActiveEntity:Boolean) returns SubscriptionDistributions;

	action triggerReplicationWithStatusChange(modelId:String, isActive:Boolean) returns Boolean;

 	action triggerInitialReplication(modelId:String, consumerDestinationName:String, providerDestinationName:String, 
 	                                 applicationScopeChanged:Boolean, distributionScopeChanged:Boolean) returns Boolean;
 	
};

