using com.sap.mdm.bp.CommonTypes as CommonTypes from './CommonTypes';
using com.sap.mdm.bp.BusinessPartnerModel as BusinessPartnerModel from './BusinessPartner';
using com.sap.mdm.bp.AddressModel as AddressModel from './AddressModel';
using com.sap.mdm.bp.BusinessPartnerRelationshipModel as BusinessPartnerRelationshipModel from './BusinessPartnerRelationship';
using com.sap.mdm.bp.ConsentTypes as ConsentTypes from './ConsentTypes';

@cds.query.limit : 25
service API_BUSINESS_PARTNER {
  // business partner

  @sap.searchable                             : 'true'
  @Capabilities                               : {
    Insertable : true,
    Updatable  : true,
    Deletable  : false,
  }
  // entity BusinessPartner as projection on BusinessPartnerModel.BusinessPartner{
  // 	*
  // } where IsBlocked != true AND IsMarkedForDeletion != true;
  @Capabilities.SearchRestrictions.Searchable : true
  view BusinessPartner as
    select from BusinessPartnerModel.BusinessPartner
    mixin {
      to_AddressIndependentCommunication : Association to one AddressIndependentCommunication
                                             on to_AddressIndependentCommunication.Parent_Id = Id;
    }
    into {
      * ,
      to_AddressIndependentCommunication
    }
    excluding {
      to_AddressIndependentCommunication,
      to_BusinessPartnerRetention,
      SourceSystem,
      SourceSystemId,
      to_AuthorizationGroup,
      to_CategoryCode,
      to_Status,
      to_LanguageCode,
      IsPublished,
      InstanceId

    }
    where
          Status                     != '05'
      and IsBusinessPurposeCompleted != true;

  annotate BusinessPartner with {
    @Search.defaultSearchElement : true
    @Search.fuzzinessThreshold   : 0.7
    BusinessPartner;
    @Search.defaultSearchElement : true
    FullName;
    @Search.defaultSearchElement : true
    SearchTerm1;
    @Search.defaultSearchElement : true
    SearchTerm2;
    @Common.FieldControl         : #ReadOnly
    IAMId;
    @Common.FieldControl         : #ReadOnly
    ContactPermission;
    @Common.FieldControl         : #ReadOnly
    BusinessPartnerPrintFormat;
  };

  annotate AddressIndependentCommunication with {
    @cds.java.expand : {using : 'parent-keys'}
    to_AddressIndependentLandlinePhone;
    @cds.java.expand : {using : 'parent-keys'}
    to_AddressIndependentMobilePhone;

  };


  //extend BusinessPartner with{
  //virtual SourceBusinessSystemId : String(11);
  //}

  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : false,
    Updatable  : false,
    Deletable  : false,
  }
  entity PaymentCard                   as projection on BusinessPartnerModel.PaymentCard {
    *
  };

  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true
  }
  entity Customer                      as projection on BusinessPartnerModel.Customer {
    * , to_Parent : redirected to BusinessPartner
  } excluding {
    to_Parent
  };


  annotate Customer with {
    @Search.defaultSearchElement : true
    Customer;
    @Search.defaultSearchElement : true
    CustomerCorporateGroup;
    @Search.defaultSearchElement : true
    CustomerAccountGroup;
    @Search.defaultSearchElement : true
    NielsenRegion;
    @Search.defaultSearchElement : true
    CustomerClassification;
  };

  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : false
  }
  entity SalesArea                     as projection on BusinessPartnerModel.SalesArea {
    * , to_Parent : redirected to Customer
  } excluding {
    to_Parent
  };


  annotate SalesArea with {
    @Search.defaultSearchElement : true
    SalesOrganization;
    @Search.defaultSearchElement : true
    DistributionChannel;
    @Search.defaultSearchElement : true
    Division;
    @Search.defaultSearchElement : true
    IncotermsClassification;
    @Search.defaultSearchElement : true
    IncotermsTransferLocation;
    @Search.defaultSearchElement : true
    CustomerPriceGroup;
    @Search.defaultSearchElement : true
    SalesGroup;
    @Search.defaultSearchElement : true
    SalesOffice;
  };

  @Capabilities.SearchRestrictions.Searchable : true
  @sap.searchable                             : 'true'
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : false
  }
  entity SalesTax                      as projection on BusinessPartnerModel.SalesTax {
    * , to_Customer : redirected to Customer
  } excluding {
    //to_Parent
    Parent_Id,
    to_Customer
  };

  annotate SalesTax with {
    @Search.defaultSearchElement : true
    Country;
    @Search.defaultSearchElement : true
    TaxCategory;
    @Search.defaultSearchElement : true
    TaxClassification;

  };

  @Capabilities.SearchRestrictions.Searchable : true
  @sap.searchable                             : 'true'
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : false
  }
  entity CustomerPartnerFunction       as projection on BusinessPartnerModel.CustomerPartnerFunction {
    * , to_Parent : redirected to SalesArea
  } excluding {
    to_Parent
  };

  annotate CustomerPartnerFunction with {
    @Search.defaultSearchElement : true
    PartnerFunction;
    @Search.defaultSearchElement : true
    PartnerNumber;
    @Search.defaultSearchElement : true
    PartnerType;
    @Search.defaultSearchElement : true
    PartnerDescription;

  };

  @sap.searchable : 'true'
  @Capabilities   : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true,
  }
  view AddressInformation as
    select from BusinessPartnerModel.AddressInformation {
      * ,
      to_Parent : redirected to BusinessPartner
    }
    excluding {

      to_Parent
    }
    where
      IsDeleted != true
      and (
           IsIndependent is null
        or IsIndependent =  false
      );

  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true,
  }
  view AddressIndependentCommunication as
    select from BusinessPartnerModel.AddressInformation as AI
    join AddressModel.Address as A
      on AI.Address_Id = A.Id
    mixin {
      to_AddressIndependentFax           : Composition of many AddressIndependentFaxNumber
                                             on to_AddressIndependentFax.Parent_Id = A.Id;
      to_AddressIndependentEmail         : Composition of many AddressIndependentEmail
                                             on to_AddressIndependentEmail.Parent_Id = A.Id;
      to_AddressIndependentLandlinePhone : Association to many AddressIndependentPhoneNumber
                                             on to_AddressIndependentLandlinePhone.Parent_Id = A.Id
                                             and (
                                                  to_AddressIndependentLandlinePhone.NumberType = ' '
                                               or to_AddressIndependentLandlinePhone.NumberType = '1'
                                             );
      to_AddressIndependentMobilePhone   : Association to many AddressIndependentPhoneNumber
                                             on to_AddressIndependentMobilePhone.Parent_Id = A.Id
                                             and (
                                                  to_AddressIndependentMobilePhone.NumberType = '2'
                                               or to_AddressIndependentMobilePhone.NumberType = '3'
                                             );
      to_AddressIndependentWeb           : Composition of many AddressIndependentWeb
                                             on to_AddressIndependentWeb.Parent_Id = A.Id;
    }
    into {
      key A.Id as Id,
          AI.Parent_Id,
          AI.IsDeleted,
          AI.CreatedByUser,
          AI.CreationDate,
          AI.LastChangedByUser,
          AI.LastChangeDate,
          AI.ValidityStartDate,
          AI.ValidityEndDate,
          A.AddressType,
          AI.IsIndependent,
          A.PrfrdCommMediumType, //check if this field need to be added for independent communication
          to_AddressIndependentLandlinePhone,
          to_AddressIndependentMobilePhone,
          to_AddressIndependentFax,
          to_AddressIndependentEmail,
          to_AddressIndependentWeb
    }
    where
          AI.IsDeleted     != true
      and A.AddressType    =  '4'
      and AI.IsIndependent =  true;

  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true,
  }
  entity AddressUsage                  as projection on BusinessPartnerModel.AddressUsage {
    * , to_Parent : redirected to AddressInformation, to_Root : redirected to BusinessPartner
  } excluding {
    to_Parent,
    to_Root,
    to_AddressUsageCode
  };


  annotate AddressUsage with {
    @Search.defaultSearchElement : true
    AddressUsage;
  };


  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : false,
  }
  entity PersonName                    as projection on BusinessPartnerModel.Person {
    * , to_Parent : redirected to BusinessPartner
  } excluding {
    to_Parent,
    to_AcademicTitleCode,
    to_AdditionalAcademicTitleCode,
    to_AcademicTitle,
    to_AdditionalNamePrefixCode,
    to_FormOfAddressCode,
    to_GenderCode,
    to_NameFormatCode,
    to_NameFormatCountryCode,
    to_NamePrefixCode,
    to_NameSupplementCode,
    to_NationalityCode
  };


  annotate PersonName with {
    @Search.defaultSearchElement : true
    FirstName;
    @Search.defaultSearchElement : true
    MiddleName;
    @Search.defaultSearchElement : true
    LastName;
    @Search.defaultSearchElement : true
    AdditionalLastName;
    @Search.defaultSearchElement : true
    BirthName;
    @Search.defaultSearchElement : true
    NickName;
  };


  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : false,
  }
  entity OrganizationName              as projection on BusinessPartnerModel.Organization {
    * , to_Parent : redirected to BusinessPartner
  } excluding {
    to_Parent,
    to_CompanyLegalFormCode,
    to_FormOfAddressCode
  };


  annotate OrganizationName with {
    @Search.defaultSearchElement : true
    LegalForm;
    @Search.defaultSearchElement : true
    OrganizationName1;
    @Search.defaultSearchElement : true
    OrganizationName2;
    @Search.defaultSearchElement : true
    OrganizationName3;
    @Search.defaultSearchElement : true
    OrganizationName4;
    @Search.defaultSearchElement : true
    FormOfAddress;
  };

  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true,
  }
  entity GroupName                     as projection on BusinessPartnerModel.BusinessPartnerGroup {
    * , to_Parent : redirected to BusinessPartner
  } excluding {
    to_Parent
  };

  annotate GroupName with {
    @Search.defaultSearchElement : true
    BusinessPartnerGroupName1;
    @Search.defaultSearchElement : true
    BusinessPartnerGroupName2;
  };

  /*@sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
 @Capabilities: { Insertable:true, Updatable:false, Deletable:true, }
 entity Identification as projection on BusinessPartnerModel.Identification{
  *,
  to_Parent: redirected to BusinessPartner
 }excluding{
  to_Parent,
  to_CountryCode,
  to_IdentificationType,
  to_RegionCode
  }; */


  annotate Identification with {
    @Search.defaultSearchElement : true
    IdentificationNumber;
    @Search.defaultSearchElement : true
    IdentificationType;
    @Search.defaultSearchElement : true
    Country;
    @Search.defaultSearchElement : true
    Region;
    @Search.defaultSearchElement : true
    Institute;
  };

  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true,
  }
  entity IndustrySector                as projection on BusinessPartnerModel.IndustrySector {
    * , to_Parent : redirected to BusinessPartner
  } excluding {
    to_Parent,
    to_IndustryClassificationSystemCode,
    to_IndustrySectorCode
  };

  annotate IndustrySector with {
    @Search.defaultSearchElement : true
    IndustrySector;
    @Search.defaultSearchElement : true
    IndustrySystemType;
  };

  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true
  }
  entity Role                          as projection on BusinessPartnerModel.Role {
    * , to_Parent : redirected to BusinessPartner
  } excluding {
    to_Parent,
    to_RoleCode
  };


  annotate Role with {
    @Search.defaultSearchElement : true
    Role;
  };

  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true,
  }
  entity TaxNumber                     as projection on BusinessPartnerModel.TaxNumber excluding {
    to_TaxCategoryCode
  };


  annotate TaxNumber with {
    @Search.defaultSearchElement : true
    TaxNumberCategory;
    @Search.defaultSearchElement : true
    TaxNumber;
  };

  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true,
  }
  entity Web                           as projection on AddressModel.Web;

  annotate Web with {
    @Search.defaultSearchElement : true
    UriType;
    @Search.defaultSearchElement : true
    Uri;
  };

  view AddressIndependentWebDummy as
    select from Web
    mixin {
      to_Parent : Association to one AddressIndependentCommunication
                    on to_Parent.Id = Parent_Id;
    }
    into {
      * ,
      to_Parent,
      to_Parent.AddressType
    }
    excluding {
      to_Parent
    };

  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true,
  }
  entity AddressIndependentWeb         as
    select from AddressIndependentWebDummy {
      *
    }
    where
      AddressType = '4';

  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true,
  }
  entity Address                       as
    select from AddressModel.Address
    excluding {
      to_pcmtc,
      to_Phone
    };


  annotate Address with {
    @Search.defaultSearchElement : true
    AddressType;
    @Search.defaultSearchElement : true
    PrfrdCommMediumType;
  };


  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true,
  }
  entity PostalAddress                 as projection on AddressModel.PostalAddress excluding {
    to_CorrespondenceLanguageCode,
    to_CountryCode,
    to_PoBoxDeviatingCountryCode,
    to_PoBoxDeviatingRegionCode,
    to_RegionCode
  };

  annotate PostalAddress with {
    @Search.defaultSearchElement : true
    ScriptCode;
    @Search.defaultSearchElement : true
    PoBox;
    @Search.defaultSearchElement : true
    PoBoxPostalCode;
    @Search.defaultSearchElement : true
    PoBoxDeviatingCountry;
    @Search.defaultSearchElement : true
    PostalCode;
    @Search.defaultSearchElement : true
    CompanyPostalCode;
    @Search.defaultSearchElement : true
    StreetName;
    @Search.defaultSearchElement : true
    HouseNumber;
    @Search.defaultSearchElement : true
    CityCode;
    @Search.defaultSearchElement : true
    CityName;
    @Search.defaultSearchElement : true
    District;
    @Search.defaultSearchElement : true
    Country;
    @Search.defaultSearchElement : true
    Region;
    @Search.defaultSearchElement : true
    County;
    @Search.defaultSearchElement : true
    RoomNumber;
  };


  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true,
  }
  entity FaxNumber                     as projection on AddressModel.Fax excluding {
    to_CountryCode
  };

  annotate FaxNumber with {
    @Search.defaultSearchElement : true
    DestinationLocationCountry;
    @Search.defaultSearchElement : true
    Number;
    @Search.defaultSearchElement : true
    NumberExtension;
  };

  view AddressIndependentFaxNumberDummy as
    select from FaxNumber
    mixin {
      to_Parent : Association to one AddressIndependentCommunication
                    on to_Parent.Id = Parent_Id;
    }
    into {
      * ,
      to_Parent,
      to_Parent.AddressType
    }
    excluding {
      to_Parent
    };

  @Capabilities : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true,
  }
  entity AddressIndependentFaxNumber   as
    select from AddressIndependentFaxNumberDummy {
      *

    }
    where
      AddressType = '4';

  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true,
  }
  entity EmailAddress                  as projection on AddressModel.Email;


  annotate EmailAddress with {
    @Search.defaultSearchElement : true
    EmailAddress;
  };

  view AddressIndependentEmailAddressDummy as
    select from EmailAddress
    mixin {
      to_Parent : Association to one AddressIndependentCommunication
                    on to_Parent.Id = Parent_Id;
    }
    into {
      * ,
      to_Parent,
      to_Parent.AddressType as AddressType,
    }
    excluding {
      to_Parent
    };

  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true,
  }
  view AddressIndependentEmail as
    select from AddressIndependentEmailAddressDummy {
      *
    }
    where
      AddressType = '4';

  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true,
  }
  entity PhoneNumber                   as projection on AddressModel.Phone excluding {
    to_CountryCode
  };


  annotate PhoneNumber with {
    @Search.defaultSearchElement : true
    Number;
    @Search.defaultSearchElement : true
    NumberType;
    @Search.defaultSearchElement : true
    NumberExtension;
  };

  view AddressIndependentPhoneNumberDummy as
    select from PhoneNumber
    mixin {
      to_Parent : Association to one AddressIndependentCommunication
                    on to_Parent.Id = Parent_Id;
    }
    into {
      * ,
      to_Parent,
      to_Parent.AddressType
    }
    excluding {
      to_Parent,
      to_CountryCode
    };

  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true,
  }
  entity AddressIndependentPhoneNumber as
    select from AddressIndependentPhoneNumberDummy {
      *
    }
    where
      AddressType = '4';

  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true,
  }
  entity Workplace                     as projection on AddressModel.Workplace;


  annotate Workplace with {
    @Search.defaultSearchElement : true
    ScriptCode;
    @Search.defaultSearchElement : true
    FunctionalTitleName;
    @Search.defaultSearchElement : true
    DepartmentName;
    @Search.defaultSearchElement : true
    Building;
    @Search.defaultSearchElement : true
    Floor;
    @Search.defaultSearchElement : true
    Room;
  };

  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true,
  }
  entity AddressPersonName             as projection on AddressModel.Person excluding {
    to_AcademicTitleCode,
    to_AdditionalAcademicTitleCode,
    to_FormOfAddressCode,
    to_GenderCode,
    to_NameFormatCode,
    to_NameFormatCountryCode,
    to_NamePrefixCode,
    to_NameSupplementCode,
    to_AdditionalNamePrefixCode
  };

  annotate AddressPersonName with {
    @Search.defaultSearchElement : true
    ScriptCode;
    @Search.defaultSearchElement : true
    FormOfAddress;
    @Search.defaultSearchElement : true
    Gender;
    @Search.defaultSearchElement : true
    AcademicTitle;
    @Search.defaultSearchElement : true
    NameSupplement;
    @Search.defaultSearchElement : true
    FirstName;
    @Search.defaultSearchElement : true
    MiddleName;
    @Search.defaultSearchElement : true
    LastName;
    @Search.defaultSearchElement : true
    BirthName;
    @Search.defaultSearchElement : true
    NickName;
    @Search.defaultSearchElement : true
    FullName;
  };


  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true,
  }
  entity AddressOrganizationName       as projection on AddressModel.Organization excluding {
    to_CompanyLegalFormCode,
    to_FormOfAddressCode
  };


  annotate AddressOrganizationName with {
    @Search.defaultSearchElement : true
    ScriptCode;
    @Search.defaultSearchElement : true
    FormOfAddress;
    @Search.defaultSearchElement : true
    LegalForm;
    @Search.defaultSearchElement : true
    OrganizationName1;
    @Search.defaultSearchElement : true
    OrganizationName2;
    @Search.defaultSearchElement : true
    OrganizationName3;
    @Search.defaultSearchElement : true
    OrganizationName4;
  };

  // business partner relationship
  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true,
  }
  entity BusinessPartnerRelationship   as projection on BusinessPartnerRelationshipModel.BusinessPartnerRelationship {
    * , to_FirstBusinessPartner : redirected to BusinessPartner, to_SecondBusinessPartner : redirected to BusinessPartner
  } excluding {
    to_FirstBusinessPartner,
    to_SecondBusinessPartner
  };

  annotate BusinessPartnerRelationship with {
    @Search.defaultSearchElement : true
    RelationshipCategory;
    @Search.defaultSearchElement : true
    Status;
  };

  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true,
  }
  entity ContactPerson                 as projection on BusinessPartnerRelationshipModel.ContactPerson excluding {
    to_Department,
    to_Function
  };

  annotate ContactPerson with {
    @Search.defaultSearchElement : true
    VipPartner;
    @Search.defaultSearchElement : true
    Department;
    @Search.defaultSearchElement : true
    PartnerFunction;
    @Search.defaultSearchElement : true
    PartnerAuthority;
  };

  @sap.searchable : 'true'
  @Capabilities   : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true,
  }
  entity WorkPlaceAddressInformation   as projection on BusinessPartnerRelationshipModel.WorkPlaceAddressInformation;

  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity RoleCode as projection on RoleModel.Role;
  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity RoleText as projection on RoleModel.RoleText;

  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity TaxCategoryCode as projection on TaxCategoryModel.TaxCategory;

  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity TaxCategoryCodeText as projection on TaxCategoryModel.TaxCategoryText;


  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity AcademicTitleCode as projection on AcademicTitleModel.AcademicTitle;
  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity AcademicTitleText as projection on AcademicTitleModel.AcademicTitleText;

  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity AddressUsageCode as projection on AddressUsageModel.AddressUsage;
  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity AddressUsageText as projection on AddressUsageModel.AddressUsageText;

  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity RelationshipCategoryCode as projection on BPRelationshipCategoryModel.BPRelationshipCategory;
  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity RelationshipCategoryText as projection on BPRelationshipCategoryModel.BPRelationshipCategoryText;

  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity CompanyLegalFormCode as projection on CompanyLegalFormModel.CompanyLegalForm;
  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity CompanyLegalFormText as projection on CompanyLegalFormModel.CompanyLegalFormText;

  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity CountryCode as projection on C_Countries{
  //	*,
  //	subdivision: redirected to Region,
  //	text : redirected to CountryCodeText,
  //	countryText : redirected to CountryCodeText
  //}excluding{
  //	subdivision,
  //	text,
  //	countryText
  // };

  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }

  //entity CountryCodeText as projection on C_CountryTexts;


  //entity FormOfAddressCode as projection on FormOfAddressModel.FormOfAddress;
  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity FormOfAddressText as projection on FormOfAddressModel.FormOfAddressText;

  //@Capabilities: { Insertable:true, Updatable:false, Deletable:true, }
  //entity IndustryClassificationSystemCode as projection on IndustryClassificationSystemModel.IndustryClassificationSystem;
  //@Capabilities: { Insertable:true, Updatable:false, Deletable:true, }
  //entity IndustryClassificationSystemText as projection on IndustryClassificationSystemModel.IndustryClassificationSystemText;

  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity IndustrySectorCode as projection on IndustrySectorModel.IndustrySector;
  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity IndustrySectorText as projection on IndustrySectorModel.IndustrySectorText;

  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity LanguageCode as projection on C_Languages{
  //	*,
  //	text: redirected to LanguageCodeTexts,
  //	description : redirected to LanguageCodeTexts
  //}excluding{
  //	text,
  //	description
  //};
  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity LanguageCodeTexts as projection on C_LanguageTexts;

  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity NameSupplementCode as projection on NameSupplementModel.NameSupplement;
  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity NameSupplementText as projection on NameSupplementModel.NameSupplementText;

  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity PreferredCommMediumTypeCode as projection on PreferredCommMediumTypeModel.PreferredCommMediumType;
  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity PreferredCommMediumTypeText as projection on PreferredCommMediumTypeModel.PreferredCommMediumTypeText;

  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }

  //entity Region as projection on C_Subdivisions{
  //	*,
  //	subdivisionText: redirected to RegionText,
  //	regionText: redirected to RegionText
  //}excluding{
  //	subdivisionText,
  //	regionText
  //};
  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }

  //entity RegionText as projection on C_SubdivisionTexts;

  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity GenericDomainCode as projection on GenericModel.GenericDomainCodeList;
  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity GenericDomainText as projection on GenericModel.GenericDomainCodeListText;

  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity Status as projection on BusinessPartnerStatus.Status;
  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity StatusText as projection on BusinessPartnerStatus.StatusText;

  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity NameFormatCode as projection on NameFormatModel.NameFormat;

  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity NamePrefixCode as projection on NamePrefixModel.NamePrefix;

  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity IdentificationTypeCode as projection on IdentificationTypeModel.IdentificationType;
  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity IdentificationTypeCodeText as projection on IdentificationTypeModel.IdentificationTypeText;

  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity AuthorizationGroupCode as projection on AuthorizationGroupModel.AuthorizationGroup;
  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity AuthorizationGroupCodeText as projection on AuthorizationGroupModel.AuthorizationGroupText;

  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity Department as projection on ContactPersonDepartmentModel.Department;
  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity DepartmentText as projection on ContactPersonDepartmentModel.DepartmentText;

  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity Function as projection on ContactPersonFunctionModel.Function;
  //@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
  //entity FunctionText as projection on ContactPersonFunctionModel.FunctionText;

  action CreateBusinessPartnerWithConsent(DataSubjectId : ConsentTypes.TDataSubjectId, TemplateName : ConsentTypes.TTemplateName not null, LanguageCode : ConsentTypes.TLanguageCode not null, DataSubjectTypeName : ConsentTypes.TDataSubjectTypeName not null, DataSubjectDescription : ConsentTypes.TDescription, ValidFrom : Timestamp, GrantedBy : ConsentTypes.TGrantedBy, GrantedAt : ConsentTypes.TGrantedAt, SubmissionSite : ConsentTypes.TConsentSubmissionSite, BusinessPartner : CommonTypes.BusinessPartnerNumber, AuthorizationGroup : String(4) not null, Category : String(1) not null, LastName : CommonTypes.AddressName, OrganizationName : CommonTypes.AddressName


  ) returns array of                                      API_BUSINESS_PARTNER.BusinessPartnerWithConsent;

  type BusinessPartnerWithConsent : {
    Id                      : CommonTypes.Id;
    BusinessPartnerCategory : CommonTypes.BusinessPartnerCategory;
    BusinessPartnerNumber   : CommonTypes.BusinessPartnerNumber;
    OrganizationName1       : CommonTypes.AddressName;
    LastName                : CommonTypes.AddressName;
    ConsentTemplateName     : ConsentTypes.TTemplateName;
    ConsentTemplateId       : CommonTypes.Id;
    ConsentId               : CommonTypes.Id;
  }

  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true,
  }
  entity Supplier                      as projection on BusinessPartnerModel.Supplier;

  annotate Supplier with {
    @Search.defaultSearchElement : true
    Supplier;
    @Search.defaultSearchElement : true
    SupplierAccountGroup;
    @Search.defaultSearchElement : true
    AlternativePayee;
    @Search.defaultSearchElement : true
    ResponsibleType
  };


  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : false,
    Updatable  : false,
    Deletable  : false,
  }
  entity SupplierCompany               as projection on BusinessPartnerModel.SupplierCompany;

  annotate SupplierCompany with {
    @Search.defaultSearchElement : true
    CompanyCode;
    @Search.defaultSearchElement : true
    ReconciliationAccount;
    @Search.defaultSearchElement : true
    LayoutSortingRule;
    @Search.defaultSearchElement : true
    MinorityGroup;
    @Search.defaultSearchElement : true
    PaymentTerms;
    @Search.defaultSearchElement : true
    PaymentMethodsList;
    @Search.defaultSearchElement : true
    HouseBank;
    @Search.defaultSearchElement : true
    CashPlanningGroup;
    @Search.defaultSearchElement : true
    AccountingClerk;
    @Search.defaultSearchElement : true
    AccountingClerkPhoneNumber;
    @Search.defaultSearchElement : true
    AlternativePayee;
    @Search.defaultSearchElement : true
    APARToleranceGroup;
  };

  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : false,
    Updatable  : false,
    Deletable  : false,
  }
  entity SupplierPurchasingOrg         as projection on BusinessPartnerModel.SupplierPurchasingOrg;

  annotate SupplierPurchasingOrg with {
    @Search.defaultSearchElement : true
    PurchasingOrganization;
    @Search.defaultSearchElement : true
    PurchaseOrderCurrency;
    @Search.defaultSearchElement : true
    PaymentTerms;
    @Search.defaultSearchElement : true
    IncotermsClassification;
    @Search.defaultSearchElement : true
    CalculationSchemaGroupCode;
    @Search.defaultSearchElement : true
    PurchasingGroup;
  };

  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : true,
    Updatable  : false,
    Deletable  : true,
  }
  entity BusinessPartnerWhldgTax       as projection on BusinessPartnerModel.BusinessPartnerWhldgTax;

  annotate BusinessPartnerWhldgTax with {
    @Search.defaultSearchElement : true
    WithholdingTaxType;
    @Search.defaultSearchElement : true
    WithholdingTaxCode;
    @Search.defaultSearchElement : true
    WithholdingTaxNumber;
    @Search.defaultSearchElement : true
    ExemptionReason;
    @Search.defaultSearchElement : true
    RecipientType;
  };

  @sap.searchable : 'true'
  @Capabilities   : {
    Insertable : false,
    Updatable  : false,
    Deletable  : false,
  }
  entity SupplierPartnerFunction       as projection on BusinessPartnerModel.SupplierPartnerFunction;

  annotate SupplierPartnerFunction with {
    @Search.defaultSearchElement : true
    PartnerFunction;
    @Search.defaultSearchElement : true
    PartnerNumber;
  };

  @sap.searchable                             : 'true'
  @Capabilities.SearchRestrictions.Searchable : true
  @Capabilities                               : {
    Insertable : false,
    Updatable  : false,
    Deletable  : false,
  }
  entity BusinessPartnerBank           as projection on BusinessPartnerModel.BusinessPartnerBank;

  annotate BusinessPartnerBank with {
    @Search.defaultSearchElement : true
    BankIdentification;
    @Search.defaultSearchElement : true
    BankAccount;
    @Search.defaultSearchElement : true
    BankCountryKey;
    @Search.defaultSearchElement : true
    BankNumber;
    @Search.defaultSearchElement : true
    BankAccountName;
    @Search.defaultSearchElement : true
    BankAccountHolderName;
    @Search.defaultSearchElement : true
    IBAN;
  };
};
