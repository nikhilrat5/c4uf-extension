using com.sap.mdm.bp.CommonTypes as CommonTypes from './CommonTypes';
using com.sap.mdm.bp.BusinessPartnerModel as BusinessPartnerModel from './BusinessPartner';
using com.sap.mdm.bp.AddressModel as AddressModel from './AddressModel';
using com.sap.mdm.bp.BusinessPartnerRelationshipModel as BusinessPartnerRelationshipModel from './BusinessPartnerRelationship';
using com.sap.mdm.bp.RoleModel as RoleModel from './RoleModel';
using com.sap.mdm.bp.AcademicTitleModel as AcademicTitleModel from './AcademicTitleModel';
using com.sap.mdm.bp.AddressUsageModel as AddressUsageModel from './AddressUsageModel';
using com.sap.mdm.bp.BPRelationshipCategoryModel as BPRelationshipCategoryModel from './BPRelationshipCategoryModel';
using com.sap.mdm.bp.CompanyLegalFormModel as CompanyLegalFormModel from './CompanyLegalFormModel';
using com.sap.mdm.bp.CountryModel as CountryModel from './CountryModel';
using com.sap.mdm.bp.FormOfAddressModel as FormOfAddressModel from './FormOfAddressModel';
using com.sap.mdm.bp.IndustryClassificationSystemModel as IndustryClassificationSystemModel from './IndustryClassificationSystemModel';
using com.sap.mdm.bp.IndustrySectorModel as IndustrySectorModel from './IndustrySectorModel';
using com.sap.mdm.bp.NameSupplementModel as NameSupplementModel from './NameSupplementModel';
using com.sap.mdm.bp.PreferredCommMediumTypeModel as PreferredCommMediumTypeModel from './PreferredCommMediumTypeModel';
using com.sap.mdm.bp.RegionModel as RegionModel from './RegionModel';
using com.sap.mdm.bp.NamePrefixModel as NamePrefixModel from './NamePrefixModel';
using com.sap.mdm.bp.NameFormatModel as NameFormatModel from './NameFormatModel';
using com.sap.mdm.bp.GenericModel as GenericModel from './GenericModel';
using com.sap.mdm.bp.IdentificationTypeModel as IdentificationTypeModel from './IdentificationTypeModel';
using com.sap.mdm.bp.AuthorizationGroupModel as AuthorizationGroupModel from './AuthorizationGroupModel';
using com.sap.mdm.bp.ContactPersonDepartmentModel as ContactPersonDepartmentModel from './ContactPersonDepartmentModel';
using com.sap.mdm.bp.ContactPersonFunctionModel as ContactPersonFunctionModel from './ContactPersonFunctionModel';
using com.sap.mdm.bp.BusinessPartnerStatus as BusinessPartnerStatus from './BusinessPartnerStatus';
using com.sap.mdm.bp.TaxCategoryModel as TaxCategoryModel from './TaxCategoryModel';
using com.sap.mdm.bp.CustomerClassificationModel as CustomerClassificationModel from './CustomerClassificationModel';
using com.sap.mdm.bp.CustomerAccountGroupModel as CustomerAccountGroupModel from './CustomerAccountGroupModel';
using com.sap.mdm.bp.CustomerGroupModel as CustomerGroupModel from './CustomerGroupModel';
using com.sap.mdm.bp.BillingBlockModel as BillingBlockModel from './BillingBlockModel';
using com.sap.mdm.bp.SalesOrderBlockModel as SalesOrderBlockModel from './SalesOrderBlockModel';
using com.sap.mdm.bp.SalesDivisionModel as SalesDivisionModel from './SalesDivisionModel';
using com.sap.mdm.bp.SalesOrganizationModel as SalesOrganizationModel from './SalesOrganizationModel';
using com.sap.mdm.bp.DistributionChannelModel as DistributionChannelModel from './DistributionChannelModel';
using com.sap.mdm.bp.DeliveryBlockModel as DeliveryBlockModel from './DeliveryBlockModel';
using com.sap.mdm.bp.SalesGroupModel as SalesGroupModel from './SalesGroupModel';
using com.sap.mdm.bp.BusinessPartnerFunctionModel as BusinessPartnerFunctionModel from './BusinessPartnerFunctionModel';
using com.sap.mdm.bp.CustomerPriceGroupModel as CustomerPriceGroupModel from './CustomerPriceGroupModel';
using com.sap.mdm.bp.GenericConfigurationsModel as GenericConfigurationsModel from './GenericConfigurationsModel';
using com.sap.mdm.bp.SupplierConfigurationModel as SupplierConfigurationModel from './SupplierConfigurationModel';
using com.sap.mdm.bp.PaymentTermsModel as PaymentTermsModel from './PaymentTermsModel';
using com.sap.mdm.bp.BusinessPartnerDistributionChannelVH as BusinessPartnerDistributionChannelVH from './DistributionChannelVH';
using com.sap.mdm.bp.BusinessPartnerDivisionVH as BusinessPartnerDivisionVH from './SalesDivisionVH';
using com.sap.mdm.bp.BusinessPartnerSalesOrganizationVH as BusinessPartnerSalesOrganizationVH from './SalesOrganizationVH';
using com.sap.mdm.bp.BusinessPartnerSalesAreaMappingVH as BusinessPartnerSalesAreaMappingVH from './SalesAreaMappingVH';
using com.sap.mdm.bp.ConsentTypes as ConsentTypes from './ConsentTypes';

using cds.foundation.sap.language.C_LanguagesWithTexts from '@sap/reusemodel-language/db/data-model';
using cds.foundation.sap.language.C_LanguageTexts from '@sap/reusemodel-language/db/data-model';
using cds.foundation.sap.language.Languages from '@sap/reusemodel-language/db/data-model';
using cds.foundation.sap.language.C_Languages from '@sap/reusemodel-language/db/data-model';

using cds.foundation.sap.currency.Currencies from '@sap/reusemodel-currency/db/data-model';
using cds.foundation.sap.currency.C_CurrencyTexts from '@sap/reusemodel-currency/db/data-model';
using cds.foundation.sap.countrysubdivision.C_Countries from '@sap/reusemodel-countrysubdivision/db/data-model';
using cds.foundation.sap.countrysubdivision.C_Subdivisions from '@sap/reusemodel-countrysubdivision/db/data-model';
using cds.foundation.sap.countrysubdivision.C_CountryTexts from '@sap/reusemodel-countrysubdivision/db/data-model';
using cds.foundation.sap.countrysubdivision.C_SubdivisionTexts from '@sap/reusemodel-countrysubdivision/db/data-model';


service MD_BUSINESS_PARTNER {

	@sap.searchable: 'true'
    @Capabilities: { Insertable:false, Updatable:false, Deletable:false }
	view BusinessPartnerPDM as select from BusinessPartnerModel.BusinessPartner{
	*
	}excluding{
	to_Customer,
	to_AddressIndependentCommunication,
	to_Person,
	to_Organization,
	to_Group,
	to_Identification,
	to_IndustrySector,
	to_Role,
	to_AddressUsage,
	to_TaxNumber,
	to_DefaultIndustrySector,
	to_DefaultPerson,
	to_DefaultOrganization,
	to_DefaultGroup,
	to_CurrentDefaultAddressUsageCode,
	to_CurrentDefaultAddressUsage,
	to_BusinessPartnerRelationship,
	to_HasContactPerson,
	to_CurrentHasContactPerson,
	to_CurrentDefaultHasContactPerson,
	to_BusinessPartnerRetention,
	to_Supplier,
	to_Bank,
    to_AddressInformation,
    to_CurrentAddressInformation
	};

    @sap.searchable: 'true'
    @Capabilities: { Insertable:false, Updatable:false, Deletable:false }
    view AddressUsagePDM as select from BusinessPartnerModel.AddressInformation as ai join BusinessPartnerModel.AddressUsage as au on ai.Id = au.Parent_Id {
        key ai.Parent_Id,
        key au.AddressUsage
    };

	@sap.searchable: 'true'
    @Capabilities: { Insertable:false, Updatable:false, Deletable:false }
    view PhonePDM as select from BusinessPartnerModel.AddressInformation as ai join (AddressModel.Address as address join AddressModel.Phone as phone on address.Id = phone.Parent_Id) on  ai.Address_Id = address.Id {
        key ai.Parent_Id,
        key phone.Number,
        key address.Id,
        phone.NumberType,
        phone.NumberExtension,
        phone.IsDefaultPhoneNumber,
        phone.DestinationLocationCountry,
		phone.to_CountryCode.localised.CountryISOFullName as countryDescription

    };

    @sap.searchable: 'true'
    @Capabilities: { Insertable:false, Updatable:false, Deletable:false }
    view EmailPDM as select from BusinessPartnerModel.AddressInformation as ai join (AddressModel.Address as address join AddressModel.Email as email on address.Id = email.Parent_Id) on  ai.Address_Id = address.Id {
        key ai.Parent_Id,
        key address.Id,
        key email.EmailAddress,
        email.IsDefaultEmailAddress
    };

    @sap.searchable: 'true'
    @Capabilities: { Insertable:false, Updatable:false, Deletable:false }
    view PersonPDM as select from BusinessPartnerModel.AddressInformation as ai join (AddressModel.Address as address join AddressModel.Person as person on address.Id = person.Parent_Id) on  ai.Address_Id = address.Id {
		key person.Id,
        key ai.Parent_Id,
        key person.ScriptCode,
        person.FormOfAddress,
        person.Gender,
        person.AcademicTitle,
        person.AdditionalAcademicTitle,
        person.LastNamePrefix,
        person.AdditionalNamePrefix,
        person.NameSupplement,
        person.NameCountry,
        person.NameFormat,
        person.FirstName,
        person.MiddleName,
        person.LastName,
        person.AdditionalLastName,
        person.BirthName,
        person.NickName,
        person.Initials,
        person.FullName,
        person.BirthDate,
		person.to_GenderCode,
		person.to_AcademicTitleCode,
		person.to_AdditionalAcademicTitleCode,
		person.to_NameSupplementCode,
		person.to_NameFormatCode,
		person.to_NameFormatCountryCode,
		person.to_NamePrefixCode,
		person.to_AdditionalNamePrefixCode,
        person.to_FormOfAddressCode.to_FormOfAddressTextDescription.description as FormOfAddress_text,
        person.to_AcademicTitleCode.titleText as AcademicTitle_text,
        person.to_AdditionalAcademicTitleCode.titleText as AdditionalAcademicTitle_text,
        person.to_NameSupplementCode.to_NameSupplementTextDescription.description as NameSupplement_text,
        person.to_NameFormatCountryCode.localised.CountryISOFullName as NameCountry_text,
        person.to_NamePrefixCode.prefixText as LastNamePrefix_text,
        person.to_AdditionalNamePrefixCode.prefixText as AdditionalNamePrefix_text,
        person.to_GenderCode.to_GenericDomainCodeListTextDescription.text as Gender_text
    };

    @sap.searchable: 'true'
    @Capabilities: { Insertable:false, Updatable:false, Deletable:false }
    view OrganizationPDM as select from BusinessPartnerModel.AddressInformation as ai join (AddressModel.Address as address join AddressModel.Organization as org on address.Id = org.Parent_Id) on  ai.Address_Id = address.Id {
        key ai.Parent_Id,
        key org.ScriptCode,
        org.FormOfAddress,
        org.LegalForm,
        org.FoundationDate,
        org.LiquidationDate,
        org.OrganizationName1,
        org.OrganizationName2,
        org.OrganizationName3,
        org.OrganizationName4
    };

    @sap.searchable: 'true'
    @Capabilities: { Insertable:false, Updatable:false, Deletable:false }
    view FaxPDM as select from BusinessPartnerModel.AddressInformation as ai join (AddressModel.Address as address join AddressModel.Fax as fax on address.Id = fax.Parent_Id) on  ai.Address_Id = address.Id{
        key ai.Parent_Id,
        key address.Id,
        key fax.Number,
        fax.IsDefaultFaxNumber,
        fax.DestinationLocationCountry,
        fax.NumberExtension,
		fax.to_CountryCode.localised.CountryISOFullName as countryDescription
    };

    @sap.searchable: 'true'
    @Capabilities: { Insertable:false, Updatable:false, Deletable:false }
    view WorkplacePDM as select from BusinessPartnerModel.AddressInformation as ai join (AddressModel.Address as address join AddressModel.Workplace as wp on address.Id = wp.Parent_Id) on  ai.Address_Id = address.Id {
		key wp.Id,
        key ai.Parent_Id,
        key wp.ScriptCode,
        wp.FunctionalTitleName,
        wp.DepartmentName,
        wp.Building,
        wp.Floor,
        wp.Room
    };

    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
    view PaymentCardPDM as select from BusinessPartnerModel.PaymentCard{
        *

    };


    @sap.searchable: 'true'
    @Capabilities: { Insertable:false, Updatable:false, Deletable:false }
    view PostalAddressPDM as select from BusinessPartnerModel.AddressInformation as ai join (AddressModel.Address as address join AddressModel.PostalAddress as postal on address.Id = postal.Parent_Id) on  ai.Address_Id = address.Id {
		key postal.Id,
        key ai.Parent_Id,
		key postal.ScriptCode,
        postal.CorrespondenceLanguage,
        postal.PoBox,
        postal.PoBoxIsWithoutNumber,
        postal.PoBoxPostalCode,
        postal.PoBoxDeviatingCountry,
        postal.PoBoxDeviatingRegion,
        postal.PostalCode,
        postal.CompanyPostalCode,
        postal.StreetName,
        postal.StreetPrefixName,
        postal.AdditionalStreetPrefixName,
        postal.StreetSuffixName,
        postal.AdditionalStreetSuffixName,
        postal.HouseNumber,
        postal.HouseNumberSupplementText,
        postal.CityCode,
        postal.CityName,
        postal.AdditionalCityName,
        postal.District,
        postal.Country,
        postal.Region,
        postal.AddressTimeZone,
        postal.County,
        postal.Building,
        postal.Floor,
        postal.RoomNumber,
        postal.CareOfName,
        postal.PoBoxLobbyName,
        postal.PoBoxDeviatingCityName,
        postal.Latitude,
        postal.Longitude,
        postal.DeliveryServiceNumber,
        postal.DeliveryServiceTypeCode,
        postal.to_CorrespondenceLanguageCode.localised.LanguageName as correspondenceLanguage_text,
		postal.to_PoBoxDeviatingRegionCode.localisedSubdivision.CountrySubdivisionName as poBoxRegionCode_text,
		postal.to_PoBoxDeviatingCountryCode.localised.CountryISOFullName as poBoxCountry_text,
		postal.to_CountryCode.localised.CountryISOFullName as country_text,
		postal.to_RegionCode.localisedSubdivision.CountrySubdivisionName as regionCode_text
    };

	@sap.searchable: 'true'
    @Capabilities: { Insertable:false, Updatable:false, Deletable:false }
	view ContactPersonPDM as select from BusinessPartnerModel.BusinessPartner as bp join(BusinessPartnerRelationshipModel.BusinessPartnerRelationship as rel join BusinessPartnerRelationshipModel.ContactPerson as contact on
	rel.Id = contact.Parent_Id ) on bp.Id = rel.FirstBusinessPartner_Id{
	key rel.Id,
	key rel.FirstBusinessPartner_Id,
	rel.to_SecondBusinessPartner.BusinessPartner as BusinessPartner,
	rel.IsDefault,
	contact.VipPartner,
	contact.Department,
	contact.PartnerFunction,
	contact.PartnerAuthority,
	contact.CustomerContactPerson,
	contact.SupplierContactPerson,
   contact.to_Department.to_DepartmentText.ContactPersonDepartmentName as ContactPersonDepartmentName,
	contact.to_Function.to_FunctionText.ContactPersonFunctionName as ContactPersonFunctionName
	};




    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true, }
    view Address as select from AddressModel.Address {

           *,
		    to_LandlinePhone : redirected to Phone,
		    to_MobilePhone :  redirected to Phone,
            to_DefaultPostalAddress : redirected to PostalAddress,
            to_DefaultMobilePhone : redirected to Phone,
            to_DefaultLandlinePhone : redirected to Phone,
            to_DefaultFax : redirected to Fax,
            to_Web : redirected to Web,
            to_DefaultEmail,
            @UI.MultiLineText
            COALESCE(to_DefaultPostalAddress.StreetName,'') || ' ' ||
            COALESCE(to_DefaultPostalAddress.HouseNumber,'') || char(10) ||
            COALESCE(to_DefaultPostalAddress.PostalCode,'') || ' ' ||
            COALESCE(to_DefaultPostalAddress.CityName,'') || char(10) ||
            COALESCE(to_DefaultPostalAddress.Country,'') as headerAddress : String(200),
            @UI.MultiLineText
            COALESCE(to_DefaultMobilePhone.Number,'') || char(10) ||
            COALESCE(to_DefaultLandlinePhone.Number,'')  || ' ' ||
            COALESCE(to_DefaultLandlinePhone.NumberExtension ,'') || char(10) ||
            COALESCE(to_DefaultEmail.EmailAddress,'') as contactHeader : String(300),
            COALESCE(to_DefaultPostalAddress.HouseNumber,'')|| ' ' ||
            COALESCE(to_DefaultPostalAddress.StreetName,'') || ', ' ||
            COALESCE(to_DefaultPostalAddress.PostalCode,'')|| ' ' ||
            COALESCE(to_DefaultPostalAddress.CityName,'') as addressDetails : String(200)


    }
    excluding{
            to_DefaultPostalAddress,
            to_DefaultMobilePhone,
            to_DefaultLandlinePhone,
            to_DefaultEmail

    };

    annotate Address with {
    @Search.defaultSearchElement: true
    AddressType;
    @Search.defaultSearchElement: true
    PrfrdCommMediumType;
	};

    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:true, Updatable:true, Deletable:false }
    view BusinessPartner as select from BusinessPartnerModel.BusinessPartner mixin{
        cdais : Association to one  CurrentDefaultAddressInformation on cdais.Parent_Id = Id and cdais.ValidityStartDate <= now() and cdais.ValidityEndDate >= now();
        currentDefaultAddressInformation : Association to one CurrentDefaultAddressInformation on
        currentDefaultAddressInformation.Parent_Id = $projection.Id and currentDefaultAddressInformation.ValidityStartDate <= now() and
        currentDefaultAddressInformation.ValidityEndDate >= now();

              to_CurrentDefaultAddressUsage     : Association to many AddressUsage     on to_CurrentDefaultAddressUsage.Root_Id = Id
                                                                                and to_CurrentDefaultAddressUsage.AddressUsage = 'XXDEFAULT'
                                                                                and to_CurrentDefaultAddressUsage.ValidityStartDate <= now()
                                                                                and to_CurrentDefaultAddressUsage.ValidityEndDate >= now();
        to_CurrentDefaultAddressUsageCode : Association to many AddressUsage    on to_CurrentDefaultAddressUsageCode.Root_Id = Id
                                                                                and to_CurrentDefaultAddressUsageCode.IsDefaultAddress = true
                                                                                and to_CurrentDefaultAddressUsageCode.ValidityStartDate <= now()
                                                                                and to_CurrentDefaultAddressUsageCode.ValidityEndDate >= now();


        to_CurrentDefaultHasContactPerson : Association to one BusinessPartnerRelationshipModel.BusinessPartnerRelationship on to_CurrentDefaultHasContactPerson.FirstBusinessPartner_Id = Id
                                                                                                                            and to_CurrentDefaultHasContactPerson.RelationshipCategory = 'BUR001'
                                                                                                                            and to_CurrentDefaultHasContactPerson.ValidityStartDate <= now()
                                                                                                                            and to_CurrentDefaultHasContactPerson.ValidityEndDate >= now()
                                                                                                                            and to_CurrentDefaultHasContactPerson.IsDefault = true;

          to_CurrentHasContactPerson        : Association to one BusinessPartnerRelationshipModel.BusinessPartnerRelationship on to_CurrentHasContactPerson.FirstBusinessPartner_Id = Id
																															and to_CurrentHasContactPerson.RelationshipCategory = 'BUR001'
																															and to_CurrentHasContactPerson.ValidityStartDate <= now()
																															and to_CurrentHasContactPerson.ValidityEndDate >= now();
	  }
    into{
        *,
        key Id,
        @sap.display.format:'UpperCase'
        BusinessPartner,
        Category,
        FullName,
        AuthorizationGroup,
        SearchTerm1,
        SearchTerm2,
        IsBlocked,
        IsMarkedForDeletion,
        IsBusinessPurposeCompleted,
		CorrespondenceLanguage as BPCorrespondenceLanguage,
		@UI.HiddenFilter
		to_LanguageCode.localised.LanguageName as bp_correspondenceLanguage_text,
        to_Person,
        to_Organization,
        to_Group,
        to_Identification,
        to_Role,
        to_Bank,
        to_Customer,
        to_AddressUsage,
        to_TaxNumber,
        to_BusinessPartnerRelationship,
        to_DefaultIndustrySector,
        @UI.Hidden
        to_DefaultGroup,
        CreatedByUser,
        CreationDate,
        LastChangedByUser,
        LastChangeDate,
		Status,
        to_Supplier,
        to_IndustrySector,
        to_DefaultPerson,
        to_DefaultOrganization,
        to_HasContactPerson : redirected to BusinessPartnerRelationship,
        to_AddressInformation : redirected to AddressInformation,
        to_Status.to_StatusTextDescription.description as StatusDesc,
        currentDefaultAddressInformation,
        cdais.to_Address.to_DefaultPostalAddress.Country as country,
        cdais.to_Address.to_DefaultPostalAddress.to_CountryCode.CountryISOFullName as country_Text,
        cdais.to_Address.to_DefaultPostalAddress.PostalCode as postalCode,
        cdais.to_Address.to_DefaultPostalAddress.CityName as cityName,
		cdais.to_Address.to_DefaultPostalAddress.StreetName as StreetName,
		cdais.to_Address.to_DefaultPostalAddress.PoBoxPostalCode as PoBoxPostalCode,
		cdais.to_Address.to_DefaultPostalAddress.HouseNumber as HouseNumber,
		cdais.to_Address.to_DefaultPostalAddress.Region as Region,
		cdais.to_Address.to_DefaultPostalAddress.PoBox as PoBox,
		cdais.to_Address.to_DefaultFax.DestinationLocationCountry as DestinationLocationCountryFax,
		cdais.to_Address.to_DefaultFax.to_CountryCode.CountryISOFullName as DestinationLocationCountryFax_Text,
		cdais.to_Address.to_DefaultFax.Number as FaxNumber,
		cdais.to_Address.to_DefaultFax.NumberExtension as FaxNumberExtension,
		cdais.to_Address.to_DefaultEmail.EmailAddress as EmailAddress,
		cdais.to_Address.to_DefaultLandlinePhone.Number as PhoneNumberLandLine,
		cdais.to_Address.to_DefaultLandlinePhone.NumberExtension as PhoneNumberExtension,
		cdais.to_Address.to_DefaultLandlinePhone.DestinationLocationCountry as DestinationLocationCountryPhone,
		cdais.to_Address.to_DefaultLandlinePhone.to_CountryCode.CountryISOFullName as DestinationLocationCountryPhone_Text,
		cdais.to_Address.to_DefaultPostalAddress.CorrespondenceLanguage as CorrespondenceLanguage,
		//cdais.to_Address.to_DefaultPostalAddress.to_CorrespondenceLanguageCode.LanguageName as language_Text,
		cdais.to_Address.PrfrdCommMediumType as PrfrdCommMediumType,
		cdais.to_Address.to_DefaultMobilePhone.DestinationLocationCountry as DestinationLocationCountryMobile,
		cdais.to_Address.to_DefaultMobilePhone.to_CountryCode.CountryISOFullName as DestinationLocationCountryMobile_Text,
		cdais.to_Address.to_DefaultMobilePhone.Number as PhoneNumberMobile,
		//@UI.HiddenFilter
		//cdais.to_Address.to_pcmtc.to_PrfrdCommMediumTypeTextDesc.description as PreferredCommMediumTypeDesc,
		to_DefaultOrganization.OrganizationName1 as OrganizationName1,
		to_DefaultOrganization.OrganizationName2 as OrganizationName2,
		to_DefaultOrganization.OrganizationName3 as OrganizationName3,
		to_DefaultOrganization.OrganizationName4 as OrganizationName4,
		to_DefaultOrganization.FoundationDate as FoundationDate,
		to_DefaultOrganization.LiquidationDate as LiquidationDate,
		to_DefaultOrganization.Id as DefaultOrganizationId,
        @Common.Label: '{bi18n>LegalForm}'
        to_DefaultOrganization.LegalForm as LegalForm,
		to_DefaultPerson.AcademicTitle as AcademicTitle,
		to_DefaultPerson.MiddleName as MiddleName,
		to_DefaultPerson.BirthName as BirthName,
        to_DefaultPerson.BirthDate as BirthDate,
		to_DefaultPerson.NickName as NickName,
		to_DefaultPerson.Gender as Gender,
		to_DefaultPerson.Id as DefaultPersonId,
		@UI.HiddenFilter
		to_DefaultPerson.FirstName as PersonFirstName,
		@UI.HiddenFilter
		to_DefaultPerson.LastName as PersonLastName,
        to_CurrentDefaultAddressUsage,
        to_CurrentDefaultAddressUsageCode,
        to_CurrentDefaultHasContactPerson,
        to_CurrentHasContactPerson,

	CASE Category
            WHEN '1' then to_DefaultPerson.FirstName
            WHEN '2' then to_DefaultOrganization.OrganizationName1
            WHEN '3' then to_DefaultOrganization.OrganizationName1
            ELSE ' '
        END as firstName:String(100),
        CASE Category
            WHEN '1' then to_DefaultPerson.LastName
            WHEN '2' then to_DefaultOrganization.OrganizationName2
            WHEN '3' then to_DefaultOrganization.OrganizationName2
            ELSE ' '
        END as lastName:String(100),
        CASE Category
            WHEN '1' then COALESCE(to_DefaultPerson.FirstName,'') || ' ' || COALESCE(to_DefaultPerson.LastName,'')
            WHEN '2' then COALESCE(to_DefaultOrganization.OrganizationName1,'') || ' ' || COALESCE(to_DefaultOrganization.OrganizationName2,'')
            WHEN '3' then COALESCE(to_DefaultOrganization.OrganizationName1,'') || ' ' || COALESCE(to_DefaultOrganization.OrganizationName2,'')
            ELSE ' '
        END as BusinessPartenrFullName:String(100),
        CASE Category
            WHEN '1' then 'images/PersonIcon.png'
            WHEN '2' then 'images/OrgIcon.png'
            WHEN '3' then 'images/OrgIcon.png'
            ELSE ' '
        END as businessPartnerImageURL:String(100),
        CASE Category
            WHEN '1' then to_DefaultPerson.FormOfAddress
         END as PersonFormOfAddress:String(100),
        CASE Category
            WHEN '2' then to_DefaultOrganization.FormOfAddress
        END as OrgFormOfAddress:String(100),
        to_CategoryCode: redirected to GenericDomainCode,
        to_AuthorizationGroup : redirected to AuthorizationGroupCode

    } excluding{
         to_CategoryCode,
         to_AuthorizationGroup,
         to_HasContactPerson,
         to_AddressInformation,
         to_BusinessPartnerRetention,
         currentDefaultAddressInformation,
         to_CurrentAddressInformation,
         to_CurrentDefaultAddressUsage,
         to_CurrentDefaultAddressUsageCode,
         to_CurrentDefaultHasContactPerson,
         to_CurrentHasContactPerson
    }WHERE
      Status != '05';

	@Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true, }
    view DuplicateBusinessPartner as select from BusinessPartnerModel.BusinessPartner mixin{
        cdais : Association to one  CurrentDefaultAddressInformation on cdais.Parent_Id = Id and cdais.ValidityStartDate <= now() and cdais.ValidityEndDate >= now();
        currentDefaultAddressInformation : Association to one CurrentDefaultAddressInformation on
        currentDefaultAddressInformation.Parent_Id = $projection.Id and currentDefaultAddressInformation.ValidityStartDate <= now() and
        currentDefaultAddressInformation.ValidityEndDate >= now();

    }
    into{
        key Id,
        @sap.display.format:'UpperCase'
        BusinessPartner,
        Category,
        SearchTerm1,
        SearchTerm2,
        to_DefaultPerson,
        to_DefaultOrganization,
        currentDefaultAddressInformation,
        cdais.to_Address.to_DefaultPostalAddress.Country as country,
        cdais.to_Address.to_DefaultPostalAddress.to_CountryCode.CountryISOFullName as country_Text,
        cdais.to_Address.to_DefaultPostalAddress.PostalCode as postalCode,
        cdais.to_Address.to_DefaultPostalAddress.CityName as cityName,
		cdais.to_Address.to_DefaultPostalAddress.StreetName as StreetName,
		cdais.to_Address.to_DefaultPostalAddress.HouseNumber as HouseNumber,
		cdais.to_Address.to_DefaultPostalAddress.Region as Region,
		cdais.to_Address.to_DefaultPostalAddress.PoBox as PoBox,
		to_DefaultOrganization.OrganizationName1 as OrganizationName1,
		to_DefaultOrganization.OrganizationName2 as OrganizationName2,
		to_DefaultOrganization.OrganizationName3 as OrganizationName3,
		to_DefaultOrganization.OrganizationName4 as OrganizationName4,
		to_DefaultPerson.FirstName as FirstName,
		to_DefaultPerson.LastName as LastName
	}
    WHERE
     IsBlocked != true
     AND
     IsMarkedForDeletion != true;


	annotate BusinessPartner with {
        @Search.defaultSearchElement: true
        @Search.fuzzinessThreshold : 0.7
        BusinessPartner;
        @Search.defaultSearchElement: true
        SearchTerm1;
        @Search.defaultSearchElement: true
        SearchTerm2;
        @Search.defaultSearchElement: true
        OrganizationName1;
        @Search.defaultSearchElement: true
        OrganizationName2;
	@Search.defaultSearchElement: true
        PersonFirstName;
        @Search.defaultSearchElement: true
        PersonLastName;


    };

    @sap.searchable: 'true'
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true, }
    view AddressInformation as select from BusinessPartnerModel.AddressInformation mixin{
            mobilePhone : Association to many CellPhone on mobilePhone.Parent_Id = $projection.Address_Id and (mobilePhone.NumberType = '2' or mobilePhone.NumberType = '3'); //Mobile
            landlinePhone : Association to many LandlinePhone on landlinePhone.Parent_Id = $projection.Address_Id and (landlinePhone.NumberType = ' ' or landlinePhone.NumberType = '1'); //LandLine
            faxNumber    : Association to many Fax on faxNumber.Parent_Id = $projection.Address_Id;
            email        : Association to many Email on email.Parent_Id  = $projection.Address_Id;
           // address      : Association to one Address on address.Id = $projection.Address_Id;
            addressUsage : Association to many AddressUsage on addressUsage.Address_Id = $projection.Address_Id;
        }
        into{
            key Id,
            Address_Id,
            @sap.label: '{bi18n>Deleted}'
	    IsDeleted,
            Parent_Id,
            mobilePhone,
            landlinePhone,
            faxNumber,
            to_Address : redirected to Address,
            email,
            CreatedByUser,
            CreationDate,
            LastChangedByUser,
            LastChangeDate,
            ValidityStartDate : Date,
            ValidityEndDate : Date,
            addressUsage,
			to_Address.to_DefaultPostalAddress.StreetName as StreetName,
			to_Address.to_DefaultPostalAddress.HouseNumber as HouseNumber,
			to_Address.to_DefaultPostalAddress.CityName as CityName,
			to_Address.to_DefaultPostalAddress.Country as Country,
			to_Address.to_DefaultPostalAddress.PoBox as PoBox,
			to_Address.to_DefaultPostalAddress.PoBoxPostalCode as PoBoxPostalCode,
			to_Address.to_DefaultPostalAddress.Region as Region,
			to_Address.to_DefaultPostalAddress.PostalCode as PostalCode,
			to_Address.to_DefaultPostalAddress.CorrespondenceLanguage as CorrespondenceLanguage,
			to_Address.to_DefaultPostalAddress.Id as DefaultPostalAddressId,
			to_Address.PrfrdCommMediumType as ToAddressPrfrdCommMediumType,

		               @Common.FieldControl: #ReadOnly
		               @UI.MultiLineText
                       COALESCE(to_Address.to_DefaultPostalAddress.HouseNumber,'')|| ' ' ||
                       COALESCE(to_Address.to_DefaultPostalAddress.StreetName,'') || ', ' ||
                       COALESCE(to_Address.to_DefaultPostalAddress.PostalCode,'')|| ' ' ||
                       COALESCE(to_Address.to_DefaultPostalAddress.CityName,'') as addressDetails : String(200)
        } WHERE IsDeleted != true;



        view CurrentDefaultAddressInformation as select from BusinessPartnerModel.AddressInformation mixin{
             currentDefaultaddressUsage   : Association to one AddressUsage on currentDefaultaddressUsage.Address_Id = Address_Id and currentDefaultaddressUsage.Root_Id = Parent_Id  and currentDefaultaddressUsage.ValidityStartDate <= now() and currentDefaultaddressUsage.ValidityEndDate >= now();

             }
             into
             {
            key Id,
            Address_Id,
            Parent_Id,
            to_Address : redirected to Address,
            CreatedByUser,
            CreationDate,
            LastChangedByUser,
            LastChangeDate,
            ValidityStartDate : Date,
            ValidityEndDate : Date,
            currentDefaultaddressUsage.AddressUsage as addressUsageCode

        }WHERE  currentDefaultaddressUsage.AddressUsage = 'XXDEFAULT' AND IsDeleted != true;


      //entity AddressUsage as projection on BusinessPartnerModel.AddressUsage{
    @sap.searchable: 'true'
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true, }
    view AddressUsage as select from BusinessPartnerModel.AddressUsage{
        *,
        to_Root: redirected to BusinessPartner,
        to_Parent: redirected to AddressInformation,
        to_AddressUsageCode: redirected to AddressUsageCode,
        ValidityStartDate : Date,
        ValidityEndDate : Date
    }excluding{
        to_Root,
        to_Parent,
        ValidityStartDate,
        ValidityEndDate
     };

    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true, }
    entity PersonName as projection on BusinessPartnerModel.Person{
        *,
        to_GenderCode : redirected to GenericDomainCode,
        to_AcademicTitleCode : redirected to AcademicTitleCode,
        to_FormOfAddressCode : redirected to FormOfAddressCode,
        to_Parent: redirected to BusinessPartner,
		to_NameFormatCountryCode: redirected to CountryCode,
		to_AdditionalAcademicTitleCode : redirected to AcademicTitleCode,
        to_NationalityCode: redirected to CountryCode
    } excluding {
        to_GenderCode,
        to_AcademicTitleCode,
        to_FormOfAddressCode,
        to_Parent,
		to_NameFormatCountryCode,
		to_AdditionalAcademicTitleCode
    };

    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:false, Updatable:false, Deletable:false }
    view PersonNamePDM as select from PersonName {
        key Id,
		key Parent_Id,
		key ScriptCode,
		AdditionalNamePrefix,
		FormOfAddress,
		FirstName,
		NameCountry,
		NameFormat,
		Gender,
		MiddleName,
		NickName,
		Initials,
		AdditionalAcademicTitle,
		Nationality,
		AcademicTitle,
		LastNamePrefix,
		LastName,
		AdditionalLastName,
		NameSupplement,
		BirthName,
		BirthDate,
        to_GenderCode.description as Gender_text,
        to_FormOfAddressCode.description as FormOfAddress_text,
        to_AcademicTitleCode.titleText as AcademicTitle_text,
        to_AdditionalAcademicTitleCode.titleText as AdditionalAcademicTitle_text,
        to_NameSupplementCode.to_NameSupplementTextDescription.description as NameSupplement_text,
        to_NameFormatCountryCode.CountryISOFullName as NameCountry_text,
        to_NamePrefixCode.prefixText as LastNamePrefix_text,
        to_AdditionalNamePrefixCode.prefixText as AdditionalNamePrefix_text,
        //to_NationalityCode: redirected to CountryCode,
        to_NationalityCode.CountryISOFullName as NationalityCode_text
    };

    annotate PersonName with {
    @Search.defaultSearchElement: true
    FirstName;
    @Search.defaultSearchElement: true
    MiddleName;
    @Search.defaultSearchElement: true
    LastName;
    @Search.defaultSearchElement: true
    AdditionalLastName;
    @Search.defaultSearchElement: true
    BirthName;
    @Search.defaultSearchElement: true
    NickName;
	};


    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true, }
    entity OrganizationName as projection on BusinessPartnerModel.Organization{
        *,
        to_CompanyLegalFormCode : redirected to CompanyLegalFormCode,
        to_FormOfAddressCode : redirected to FormOfAddressCode,
        to_Parent: redirected to BusinessPartner

    }excluding{
        to_CompanyLegalFormCode,
        to_FormOfAddressCode,
        to_Parent
     };

    annotate OrganizationName with {
    @Search.defaultSearchElement: true
    LegalForm;
    @Search.defaultSearchElement: true
    OrganizationName1;
    @Search.defaultSearchElement: true
    OrganizationName2;
    @Search.defaultSearchElement: true
    OrganizationName3;
    @Search.defaultSearchElement: true
    OrganizationName4;
    @Search.defaultSearchElement: true
    FormOfAddress;
	};

    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true, }
    entity GroupName as projection on BusinessPartnerModel.BusinessPartnerGroup{
        *,
       to_Parent: redirected to BusinessPartner
    }excluding{
        to_Parent
     };

    annotate GroupName with {
    @Search.defaultSearchElement: true
    BusinessPartnerGroupName1;
    @Search.defaultSearchElement: true
    BusinessPartnerGroupName2;
	};

    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
    view IdentificationPDM as select from Identification{
        *,
        to_Parent: redirected to BusinessPartner,
        to_CountryCode : redirected to CountryCode,
        to_IdentificationType : redirected to IdentificationTypeCode,
		to_IdentificationType.description as identificationTypeCodeDescription,
		to_CountryCode.CountryISOFullName as countryCodeDescription,
		to_RegionCode.CountrySubdivisionName as regionCodeDescription,
		ValidityStartDate : Date,
		ValidityEndDate : Date,
		to_RegionCode: redirected to RegionCode
    }excluding{
        to_Parent,
        to_CountryCode,
        to_IdentificationType,
		ValidityStartDate,
		ValidityEndDate,
		to_RegionCode

     };

     //entity Identification as projection on BusinessPartnerModel.Identification{
    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true, }
    view Identification as select from BusinessPartnerModel.Identification{
        *,
        to_Parent: redirected to BusinessPartner,
        to_CountryCode : redirected to CountryCode,
        to_IdentificationType : redirected to IdentificationTypeCode,
		ValidityStartDate : Date,
		ValidityEndDate : Date,
		to_RegionCode: redirected to RegionCode
    }excluding{
        to_Parent,
        to_CountryCode,
        to_IdentificationType,
		ValidityStartDate,
		ValidityEndDate,
		to_RegionCode

     };

    annotate Identification with {
    @Search.defaultSearchElement: true
    IdentificationNumber;
    @Search.defaultSearchElement: true
    IdentificationType;
    @Search.defaultSearchElement: true
    Country;
    @Search.defaultSearchElement: true
    Region;
    @Search.defaultSearchElement: true
    Institute;
	};

    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true, }
    entity IndustrySector as projection on BusinessPartnerModel.IndustrySector{
        *,
        to_Parent: redirected to BusinessPartner,
        to_IndustryClassificationSystemCode : redirected to IndustryClassificationSystemCode,
        to_IndustrySectorCode : redirected to IndustrySectorCode
    }excluding{
        to_Parent,
        to_IndustryClassificationSystemCode,
        to_IndustrySectorCode

     };

    annotate IndustrySector with {
    @Search.defaultSearchElement: true
    IndustrySector;
    @Search.defaultSearchElement: true
    IndustrySystemType;
	};

     //entity Role as projection on BusinessPartnerModel.Role{
    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true }
    entity Role as select from BusinessPartnerModel.Role{
        *,
        to_Parent: redirected to BusinessPartner,
        to_RoleCode : redirected to RoleCode,
        //to_RoleCode.to_RoleTextDescription.description as RoleDescription,
		ValidityStartDate : Date,
		ValidityEndDate : Date

    }excluding{
        to_Parent,
        to_RoleCode,
		ValidityStartDate,
        ValidityEndDate
     };


    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:false, Updatable:false, Deletable:false }
    view RolePDM as select from Role  {
        *,
        to_RoleCode.description as RoleDescription,
    };


    annotate Role with {
    @Search.defaultSearchElement: true
    Role;
	};

    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true }
    view Customer as select from BusinessPartnerModel.Customer{
        *,
        to_Parent: redirected to BusinessPartner,
        to_AddressInformation: redirected to AddressInformation,
        to_SalesArea        : redirected to SalesArea
    }excluding{
        to_Parent,
        to_AddressInformation,
		to_SalesArea
     };

    annotate Customer with {
    @Search.defaultSearchElement: true
    Customer;
    @Search.defaultSearchElement: true
    CustomerCorporateGroup;
    @Search.defaultSearchElement: true
    CustomerAccountGroup;
    @Search.defaultSearchElement: true
    NielsenRegion;
    @Search.defaultSearchElement: true
    CustomerClassification;
	};



    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:true, Updatable:true, Deletable:false }
    view SalesArea as select from BusinessPartnerModel.SalesArea{
        *,
        to_CustomerPartnerFunction: redirected to CustomerPartnerFunction
        //to_SalesTax        : redirected to SalesTax
    }excluding{
        to_CustomerPartnerFunction
        //to_SalesTax
     };

    annotate SalesArea with {
    @Search.defaultSearchElement: true
    SalesOrganization;
    @Search.defaultSearchElement: true
    DistributionChannel;
    @Search.defaultSearchElement: true
    Division;
    @Search.defaultSearchElement: true
    IncotermsClassification;
    @Search.defaultSearchElement: true
    IncotermsTransferLocation;
    @Search.defaultSearchElement: true
    CustomerPriceGroup;
    @Search.defaultSearchElement: true
    SalesGroup;
    @Search.defaultSearchElement: true
    SalesOffice;
	};

    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:false, Updatable:false, Deletable:false }
    entity  CustomerPartnerFunction as projection on BusinessPartnerModel.CustomerPartnerFunction;

    annotate CustomerPartnerFunction with {
    @Search.defaultSearchElement: true
    PartnerFunction;
    @Search.defaultSearchElement: true
    PartnerNumber;
    @Search.defaultSearchElement: true
    PartnerType;
    @Search.defaultSearchElement: true
    PartnerDescription;

	};


	@sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:false, Updatable:false, Deletable:false }
	entity SalesTax as projection on BusinessPartnerModel.SalesTax;

	annotate SalesTax with {
    @Search.defaultSearchElement: true
    Country;
    @Search.defaultSearchElement: true
    TaxCategory;
    @Search.defaultSearchElement: true
    TaxClassification;

	};


	entity CustomerClassificationCode as projection on CustomerClassificationModel.CustomerClassification{
        @Common.Label: '{bi18n>CustomerClassification}'
        key customerClassificationCode,
        @Common.Label: '{bi18n>Description}'
        to_CustomerClassificationText.shortDescription as description
    };

    view CustomerAccountGroupCode as select from CustomerAccountGroupModel.CustomerAccountGroup{
        @Common.Label: '{bi18n>CustomerAccountGroup}'
        key customerAccountGroupCode,
        @Common.Label: '{bi18n>Description}'
        to_CustomerAccountGroupTextDescription.shortDescription as description
    } where isCustomerRelevant = true;

    entity CustomerGroupCode as projection on CustomerGroupModel.CustomerGroup{
        @Common.Label: '{bi18n>CustomerGroup}'
        key customerGroupCode,
        @Common.Label: '{bi18n>Description}'
        to_CustomerGroupTextDescription.shortDescription as description
    };
    entity SalesOrderBlockCode as projection on SalesOrderBlockModel.SalesOrderBlock{
        @Common.Label: '{bi18n>SalesBlockForCustomer}'
        key salesOrderBlockCode,
        @Common.Label: '{bi18n>Description}'
        to_SalesOrderBlockTextDescription.shortDescription as description
    };

    entity SalesOrganizationCode as projection on SalesOrganizationModel.SalesOrganization{
        @Common.Label: '{bi18n>SalesOrganization}'
        key salesOrganizationCode,
        @Common.Label: '{bi18n>Description}'
        to_SalesOrganizationTextDescription.shortDescription as description
    };

    entity DistributionChannelCode as projection on DistributionChannelModel.DistributionChannel{
        @Common.Label: '{bi18n>DistributionChannel}'
        key distributionChannelCode,
        @Common.Label: '{bi18n>Description}'
        to_DistributionChannelTextDescription.shortDescription as description
    };

    entity SalesDivisionCode as projection on SalesDivisionModel.SalesDivision{
        @Common.Label: '{bi18n>Division}'
        key salesDivisionCode,
        @Common.Label: '{bi18n>Description}'
        to_SalesDivisionTextDescription.shortDescription as description
    };

    entity BillingBlockCode as projection on BillingBlockModel.BillingBLock{
        @Common.Label: '{bi18n>BillingBlock}'
        key billingBlockCode,
        @Common.Label: '{bi18n>Description}'
        to_BillingBlockTextDescription.shortDescription as description
    };
    entity  CustomerPriceGroupCode as projection on CustomerPriceGroupModel.CustomerPriceGroup{
        @Common.Label: '{bi18n>CustomerPriceGroup}'
        key customerPriceGroupCode,
        @Common.Label: '{bi18n>Description}'
        to_CustomerPriceGroupText.shortDescription as description
    };
        entity DeliveryBlockCode as projection on DeliveryBlockModel.DeliveryBlock{
        @Common.Label: '{bi18n>DeliveryBlock}'
        key deliveryBlockCode,
        @Common.Label: '{bi18n>Description}'
        to_DeliveryBlockTextDescription.shortDescription as description
    };
        entity PartnerFunctionCode as projection on BusinessPartnerFunctionModel.BusinessPartnerFunction{
        @Common.Label: '{bi18n>BusinessPartnerFunction}'
        key businessPartnerFunctionCode,
        @Common.Label: '{bi18n>Description}'
        to_BusinessPartnerFunctionTextDescription.shortDescription as description
    };
	//For Sales Area Value Help
	entity DistributionChannel as projection on BusinessPartnerDistributionChannelVH.DistributionChannel{
        *
    };
    entity Division as projection on BusinessPartnerDivisionVH.Division{
        *
    };
    entity SalesOrganization as projection on BusinessPartnerSalesOrganizationVH.SalesOrganization{
        *
    };
      view SalesAreaMapping as select from BusinessPartnerSalesAreaMappingVH.SalesAreaMapping mixin{
         to_BusinessPartnerDistributionChannelVH : Association to one DistributionChannel on  to_BusinessPartnerDistributionChannelVH.distributionChannelCode = distributionChannelCode;
        to_BusinessPartnerDivisionVH: Association to one Division on  to_BusinessPartnerDivisionVH.divisionCode = divisionCode;
        to_BusinessPartnerSalesOrganizationVH: Association to one SalesOrganization on  to_BusinessPartnerSalesOrganizationVH.salesOrgCode = salesOrgCode;
    }
    into{
     *,
      to_BusinessPartnerDistributionChannelVH.to_DistributionChannelTextDescription.distributionChannelDescription as distributionChannelDescription,
        to_BusinessPartnerDivisionVH.to_DivisionTextDescription.divisionDescription as divisionDescription,
        to_BusinessPartnerSalesOrganizationVH.to_SalesOrgTextDescription.salesOrgDescription as salesOrgDescription
    };
    // address
    //entity Address as projection on AddressView ;

    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true, }
    entity PostalAddress as projection on AddressModel.PostalAddress{
        *,
        to_RegionCode : redirected to RegionCode,
        to_CountryCode : redirected to CountryCode,
        to_CorrespondenceLanguageCode : redirected to LanguageCode_C,
        to_Parent: redirected to Address,
		to_PoBoxDeviatingCountryCode: redirected to CountryCode,
		to_PoBoxDeviatingRegionCode: redirected to RegionCode
     }excluding{
        to_RegionCode,
        to_CountryCode,
        to_CorrespondenceLanguageCode,
        to_Parent,
		to_PoBoxDeviatingRegionCode,
		to_PoBoxDeviatingCountryCode
     };

     annotate PostalAddress with {
    @Search.defaultSearchElement: true
    ScriptCode;
    @Search.defaultSearchElement: true
    PoBox;
    @Search.defaultSearchElement: true
    PoBoxPostalCode;
    @Search.defaultSearchElement: true
    PoBoxDeviatingCountry;
    @Search.defaultSearchElement: true
    PostalCode;
    @Search.defaultSearchElement: true
    CompanyPostalCode;
    @Search.defaultSearchElement: true
    StreetName;
    @Search.defaultSearchElement: true
    HouseNumber;
    @Search.defaultSearchElement: true
    CityCode;
    @Search.defaultSearchElement: true
    CityName;
    @Search.defaultSearchElement: true
    District;
    @Search.defaultSearchElement: true
    Country;
    @Search.defaultSearchElement: true
    Region;
    @Search.defaultSearchElement: true
    County;
    @Search.defaultSearchElement: true
    RoomNumber;
	};

    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true, }
    entity Fax as projection on AddressModel.Fax{
        *,
        to_CountryCode : redirected to CountryCode,
        to_Parent: redirected to Address
     }excluding{
        to_CountryCode,
        to_Parent
     };

    annotate Fax with {
    @Search.defaultSearchElement: true
    DestinationLocationCountry;
    @Search.defaultSearchElement: true
    Number;
    @Search.defaultSearchElement: true
    NumberExtension;
	};

    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true, }
    entity Email as projection on AddressModel.Email{
        *,
        to_Parent: redirected to Address
     }excluding{
        to_Parent
     };

    annotate Email with {
    @Search.defaultSearchElement: true
    EmailAddress;
	};

    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true, }
    entity Phone as projection on AddressModel.Phone{
        *,
        to_CountryCode : redirected to CountryCode,
        to_Parent: redirected to Address
     }excluding{
        to_CountryCode,
        to_Parent
     };

    annotate Phone with {
    @Search.defaultSearchElement: true
    Number;
    @Search.defaultSearchElement: true
    NumberType;
    @Search.defaultSearchElement: true
    NumberExtension;
	};


    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true, }
    entity Workplace  as projection on AddressModel.Workplace{
        *,
        to_Parent: redirected to Address
     }excluding{
        to_Parent
     };

    annotate Workplace with {
    @Search.defaultSearchElement: true
    ScriptCode;
    @Search.defaultSearchElement: true
    FunctionalTitleName;
    @Search.defaultSearchElement: true
    DepartmentName;
    @Search.defaultSearchElement: true
    Building;
    @Search.defaultSearchElement: true
    Floor;
    @Search.defaultSearchElement: true
    Room;
	};

    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true, }
    entity AddressPersonName as projection on AddressModel.Person{
        *,
        to_Parent: redirected to Address,
		to_NameFormatCountryCode: redirected to CountryCode,
		to_FormOfAddressCode: redirected to FormOfAddressCode,
		to_GenderCode: redirected to GenericDomainCode
     }excluding{
        to_Parent,
		to_NameFormatCountryCode
     };

    annotate AddressPersonName with {
    @Search.defaultSearchElement: true
    ScriptCode;
    @Search.defaultSearchElement: true
    FormOfAddress;
    @Search.defaultSearchElement: true
    Gender;
    @Search.defaultSearchElement: true
    AcademicTitle;
    @Search.defaultSearchElement: true
    NameSupplement;
    @Search.defaultSearchElement: true
    FirstName;
    @Search.defaultSearchElement: true
    MiddleName;
    @Search.defaultSearchElement: true
    LastName;
    @Search.defaultSearchElement: true
    BirthName;
    @Search.defaultSearchElement: true
    NickName;
    @Search.defaultSearchElement: true
    FullName;
	};


    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true, }
    entity AddressOrganizationName as projection on AddressModel.Organization{
        *,
        to_Parent: redirected to Address,
		to_FormOfAddressCode: redirected to FormOfAddressCode
     }excluding{
        to_Parent
     };

    annotate AddressOrganizationName with {
    @Search.defaultSearchElement: true
    ScriptCode;
    @Search.defaultSearchElement: true
    FormOfAddress;
    @Search.defaultSearchElement: true
    LegalForm;
    @Search.defaultSearchElement: true
    OrganizationName1;
    @Search.defaultSearchElement: true
    OrganizationName2;
    @Search.defaultSearchElement: true
    OrganizationName3;
    @Search.defaultSearchElement: true
    OrganizationName4;
	};

     // New Entites
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:false, Updatable:false, Deletable:false }
    view TaxNumberPDM as select from TaxNumber{
      *,
      to_Parent: redirected to BusinessPartner,
      to_TaxCategoryCode : redirected to TaxCategoryCode,
	  to_TaxCategoryCode.description as taxNumberCategorydescription

    }excluding{
        to_TaxCategoryCode,
        to_Parent
     };

    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true, }
    entity TaxNumber as projection on BusinessPartnerModel.TaxNumber{
      *,
      to_Parent: redirected to BusinessPartner,
      to_TaxCategoryCode : redirected to TaxCategoryCode

    }excluding{
        to_TaxCategoryCode,
        to_Parent
     };

    annotate TaxNumber with {
    @Search.defaultSearchElement: true
    TaxNumberCategory;
    @Search.defaultSearchElement: true
    TaxNumber;
	};

    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true, }
    entity Web as projection on AddressModel.Web ;

    annotate Web with {
    @Search.defaultSearchElement: true
    UriType;
    @Search.defaultSearchElement: true
    Uri;
	};

    //////////
    //entity BusinessPartnerRelationship as projection on BusinessPartnerRelationshipModel.BusinessPartnerRelationship{
    // business partner relationship
        @sap.searchable: 'true'
        @Capabilities.SearchRestrictions.Searchable: true
        @Capabilities: { Insertable:true, Updatable:true, Deletable:true, }
    view BusinessPartnerRelationship as select from BusinessPartnerRelationshipModel.BusinessPartnerRelationship{
        *,
        to_ContactPerson: redirected to ContactPerson,
        to_FirstBusinessPartner: redirected to BusinessPartner,
        to_SecondBusinessPartner: redirected to BusinessPartner,
		to_SecondBusinessPartner.BusinessPartner as BusinessPartner,
		to_ContactPerson.PartnerFunction as PartnerFunction,
		to_ContactPerson.Department as Department,
		to_SecondBusinessPartner.to_DefaultPerson.FirstName as Firstname,
		to_SecondBusinessPartner.to_DefaultPerson.LastName as LastName,
		to_ContactPerson.to_Cwai.to_WorkplaceAddress.to_DefaultLandlinePhone.DestinationLocationCountry as destinationLocationCountryLandline,
        to_ContactPerson.to_Cwai.to_WorkplaceAddress.to_DefaultLandlinePhone.NumberExtension as phoneNumberExtension,
        to_ContactPerson.to_Cwai.to_WorkplaceAddress.to_DefaultFax.DestinationLocationCountry as destinationLocationCountryFax,
        to_ContactPerson.to_Cwai.to_WorkplaceAddress.to_DefaultLandlinePhone.Number as phoneNumberLandline,
        to_ContactPerson.to_Cwai.to_WorkplaceAddress.to_DefaultFax.Number as faxNumber,
        to_ContactPerson.to_Cwai.to_WorkplaceAddress.to_DefaultFax.NumberExtension as faxNumberExtension,
        to_ContactPerson.to_Cwai.to_WorkplaceAddress.to_DefaultMobilePhone.DestinationLocationCountry as destinationLocationCountryMobile,
        to_ContactPerson.to_Cwai.to_WorkplaceAddress.to_DefaultMobilePhone.Number as phoneNumberMobile,
        to_ContactPerson.to_Cwai.to_WorkplaceAddress.to_DefaultEmail.EmailAddress as EmailAddress,
        to_ContactPerson.to_Cwai.to_WorkplaceAddress.to_DefaultWorkplaceAddress.Floor as Floor,
        to_ContactPerson.to_Cwai.to_WorkplaceAddress.to_DefaultWorkplaceAddress.Building as Building,
        to_ContactPerson.to_Cwai.to_WorkplaceAddress.to_DefaultWorkplaceAddress.Room as RoomNumber,
        ValidityStartDate : Date,
		ValidityEndDate : Date,
        to_SecondBusinessPartner.to_DefaultPerson.BirthDate as BirthDate
    }excluding{
        to_ContactPerson,
        to_FirstBusinessPartner,
        to_SecondBusinessPartner,
        ValidityStartDate,
        ValidityEndDate
     }WHERE IsDeleted != true;

    annotate BusinessPartnerRelationship with {
    @Search.defaultSearchElement: true
    RelationshipCategory;
    @Search.defaultSearchElement: true
    Status;
	};

    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true, }
    view ContactPerson as select from BusinessPartnerRelationshipModel.ContactPerson mixin {
        to_WorkPlaceAddressInformation : Association to many WorkPlaceAddressInformation on to_WorkPlaceAddressInformation.Parent_Id = Id;
        to_Department : Association to one ContactPersonDepartmentModel.Department on to_Department.ContactPersonDepartment=Department;
        to_Function : Association to one ContactPersonFunctionModel.Function on to_Function.ContactPersonFunction=PartnerFunction;
		to_Cwai  : Association to one CurrentDefaultWorkPlaceAddressInformation on to_Cwai.Parent_Id = Id
                                                                                                        and to_Cwai.IsDefaultAddress = true
                                                                                                        and to_Cwai.ValidityStartDate <= now()
                                                                                                        and to_Cwai.ValidityEndDate >= now();
    }
    into{
       *,
        to_Department,
        to_Function,
        to_Cwai,
        to_WorkPlaceAddressInformation
    }excluding{
        to_Department,
        to_Function,
         to_Cwai,
        to_CurrentDefaultWorkPlaceAddressInformation,
        to_WorkPlaceAddressInformation
    };

    annotate ContactPerson with {
    @Search.defaultSearchElement: true
    VipPartner;
    @Search.defaultSearchElement: true
    Department;
    @Search.defaultSearchElement: true
    PartnerFunction;
    @Search.defaultSearchElement: true
    PartnerAuthority;
	};

    view CurrentDefaultWorkPlaceAddressInformation as select from BusinessPartnerRelationshipModel.WorkPlaceAddressInformation mixin{
        workplaceAddress : Association to one Address on workplaceAddress.Id = WorkplaceAddress_Id;
        }
        into{
        key Id,
        Parent_Id,
        WorkplaceAddress_Id,
        OrganizationAddress_Id,
        IsDefaultAddress,
        to_Parent,
        TO_DATE(ValidityStartDate) as ValidityStartDate : Date,
        TO_DATE(ValidityEndDate) as ValidityEndDate : Date,
        CreatedByUser,
        TO_DATE(CreationDate) as CreationDate : Date,
        LastChangedByUser,
        TO_DATE(LastChangeDate) as LastChangeDate : Date,
        workplaceAddress.to_DefaultLandlinePhone.DestinationLocationCountry as destinationLocationCountryLandline,
        workplaceAddress.to_DefaultLandlinePhone.NumberExtension as phoneNumberExtension,
        workplaceAddress.to_DefaultFax.DestinationLocationCountry as destinationLocationCountryFax,
        workplaceAddress.to_DefaultLandlinePhone.Number as phoneNumberLandline,
        workplaceAddress.to_DefaultFax.Number as faxNumber,
        workplaceAddress.to_DefaultFax.NumberExtension as faxNumberExtension,
        workplaceAddress.to_DefaultMobilePhone.DestinationLocationCountry as destinationLocationCountryMobile,
        workplaceAddress.to_DefaultMobilePhone.Number as phoneNumberMobile,
        workplaceAddress.to_DefaultEmail.EmailAddress as emailAddress,
        workplaceAddress.to_DefaultPostalAddress.Floor as Floor,
        workplaceAddress.to_DefaultPostalAddress.Building as Building,
        workplaceAddress.to_DefaultPostalAddress.RoomNumber as RoomNumber,
        workplaceAddress.to_DefaultLandlinePhone.to_CountryCode.CountryISOFullName as destinationLocationCountryLandline_Text,
        workplaceAddress.to_DefaultFax.to_CountryCode.CountryISOFullName as destinationLocationCountryFax_Text,
        workplaceAddress.to_DefaultMobilePhone.to_CountryCode.CountryISOFullName as destinationLocationCountryMobile_Text

        } where IsDefaultAddress = true;


    entity WorkPlaceAddressInformation as projection on BusinessPartnerRelationshipModel.WorkPlaceAddressInformation{
        *,
        to_OrganizationAddress: redirected to Address,
        to_WorkplaceAddress : redirected to Address
     }excluding{
        to_OrganizationAddress,
        to_WorkplaceAddress
     };

    entity RoleCode as projection on RoleModel.Role{
        @Common.Label: '{bi18n>BusinessPartnerRole}'
        key roleCode,
        @Common.Label: '{bi18n>Title}'
        to_RoleTextDescription.description as description
    };

    entity RoleText as projection on RoleModel.RoleText{
    *,
	key roleCode,
	key languageCode
    }
    ;




    view AcademicTitleCode as select from AcademicTitleModel.AcademicTitle{
        *,
		@Common.Text : ![titleText]
        key title,
        titleText
    };

    entity AcademicTitleText as projection on AcademicTitleModel.AcademicTitleText{
    *,
	key title,
	key languageCode
    }
    ;

    entity AddressUsageCode as projection on AddressUsageModel.AddressUsage{
        @Common.Label: '{bi18n>AddressType}'
        key addressUsageCode,

        @Common.Label: '{bi18n>Description}'
        to_AddressUsageTextDescription.shortDescription as description
    };

    entity AddressUsageText as projection on AddressUsageModel.AddressUsageText{
      @Common.Label: '{bi18n>AddressType}'
      key addressUsageCode,
      @Common.Label: '{bi18n>Description}'
      shortDescription,
	  key languageCode
    };

    entity RelationshipCategoryCode as projection on BPRelationshipCategoryModel.BPRelationshipCategory{
    *,
	key bpRelationshipCategory
    };
    entity RelationshipCategoryText as projection on BPRelationshipCategoryModel.BPRelationshipCategoryText{
    *,
	key bpRelationshipCategory,
	key languageCode
    };

    entity CompanyLegalFormCode as projection on CompanyLegalFormModel.CompanyLegalForm{
        @Common.Label: '{bi18n>companyLegalFormCode}'
        key companyLegalFormCode,
        @Common.Label: '{bi18n>Description}'
        to_CompanyLegalFormTextDescription.longDescription as description
    };
    entity CompanyLegalFormText as projection on CompanyLegalFormModel.CompanyLegalFormText{
    *,
	key companyLegalFormCode,
	key languageCode
    };

    view CountryCode as select from C_Countries{
		@Common.Label: '{i18n>CountryKey}'
        key CountryTwoLetterISOCode,
        @Common.Label: '{i18n>CountryNumber}'
        CountryThreeDigitISOCode,
        @Common.Label: '{i18n>Description}'
        localised.CountryISOFullName as CountryISOFullName
	};

	@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
	entity CountryCodeText as projection on C_CountryTexts;

    entity FormOfAddressCode as projection on FormOfAddressModel.FormOfAddress{
    *,
    @UI.HiddenFilter
    @Common.Text : ![description]
    key title,
    to_FormOfAddressTextDescription.description as description,
	to_GenderCode: redirected to GenericDomainCode
    };
    entity FormOfAddressText as projection on FormOfAddressModel.FormOfAddressText{
    *,
	key title,
	key languageCode
    };

    entity IndustryClassificationSystemCode as projection on IndustryClassificationSystemModel.IndustryClassificationSystem{
        @Common.Label: '{i18n>IndustrySystem}'
        key industryClassificationSystemCode,
        @Common.Label: '{i18n>Industry}'
        to_IndustryClassificationSystemTextDescription.description as description
    };

    entity IndustryClassificationSystemText as projection on IndustryClassificationSystemModel.IndustryClassificationSystemText{
    *,
	key industryClassificationSystemCode,
	key languageCode
    };

    entity IndustrySectorCode as projection on IndustrySectorModel.IndustrySector{
        @Common.Label: '{i18n>IndustrySystem}'
        key industryClassificationSystemCode,
        @Common.Label: '{i18n>Industry}'
        key industrySectorCode,
        @Common.Label: '{bi18n>Description}'
        @UI.HiddenFilter
        to_IndustrySectorTextDescription.longDescription as description
    };

    entity IndustrySectorText as projection on IndustrySectorModel.IndustrySectorText{
    *,
	key industryClassificationSystemCode,
	key industrySectorCode,
	key languageCode
    }
    ;

    entity  LanguageCode as projection on  Languages{
        @Common.Label: '{bi18n>Languagekey}'
        key LanguageTwoLetterISOCode,
        @Common.Label: '{bi18n>Description}'
        localised.LanguageName
    };

    view LanguageCode_C as select from C_Languages{
		@Common.Label: '{bi18n>Languagekey}'
        key LanguageTwoLetterISOCode,
        @Common.Label: '{bi18n>Description}'
        localised.LanguageName
	};
    entity LanguageText as projection on C_LanguageTexts;


    entity Currency as projection on Currencies{
        @Common.Label: '{bi18n>Currencykey}'
        key CurrencyThreeLetterISOCode,
        @Common.Label: '{bi18n>Description}'
        @UI.HiddenFilter
        localised.CurrencyISOCodeName as description
    };
    entity CurrencyText as projection on C_CurrencyTexts;

    entity NameSupplementCode as projection on NameSupplementModel.NameSupplement{
    *,
	key titleKey
    }
    ;
    entity NameSupplementText as projection on NameSupplementModel.NameSupplementText{
    *,
	key titleKey,
	key languageCode
    }
    ;

    entity PreferredCommMediumTypeCode as projection on PreferredCommMediumTypeModel.PreferredCommMediumType{
        @Common.Text : ![description]
    	@Common.Label: '{bi18n>communicationType}'
    	key communicationType,
    	@Common.Label: '{bi18n>Description}'
    	to_PrfrdCommMediumTypeTextDesc.description as description,
    	to_PrfrdCommMediumTypeTextDesc
    };
    entity PreferredCommMediumTypeText as projection on PreferredCommMediumTypeModel.PreferredCommMediumTypeText{
    *,
	key communicationType,
	key languageCode
    }
     ;

	view RegionCode as select from C_Subdivisions{
        @Common.Label: '{bi18n>CountryCode}'
		key CountryTwoLetterISOCode,
		@Common.Label: '{bi18n>RegionCode}'
		key CountrySubdivision,
        @Common.Label: '{bi18n>Description}'
        localisedSubdivision.CountrySubdivisionName as CountrySubdivisionName
    };

    entity RegionText as projection on C_SubdivisionTexts;

    entity NameFormatCode as projection on NameFormatModel.NameFormat{
    *,
	key countryKey,
	key nameFormat
    }
    ;

    entity NamePrefixCode as projection on NamePrefixModel.NamePrefix{
    *,
	key prefixKey
    };

    entity GenericDomainCode as projection on GenericModel.GenericDomainCodeList{
     *,
	 key domainName,
	 key domainValueKey,
		@Common.Text : ![description]
        codeValue,
        to_GenericDomainCodeListTextDescription.text as description
    };
    entity GenericDomainText as projection on GenericModel.GenericDomainCodeListText{
    *,
	key domainName,
	 key domainValueKey,
	 key languageCode
    }
    ;

    entity IdentificationTypeCode as projection on IdentificationTypeModel.IdentificationType{
        @Common.Label: '{bi18n>IdentificationType}'
        key identificationType,
        @Common.Label: '{bi18n>Description}'
        @UI.HiddenFilter
        to_IdentificationTypeTextDescription.description as description
    };

    entity IdentificationTypeCodeText as projection on IdentificationTypeModel.IdentificationTypeText{
    *,
	key identificationType,
	key languageCode
    }
    ;

	entity AuthorizationGroupCode as projection on AuthorizationGroupModel.AuthorizationGroup{
        @Common.Label: '{bi18n>authorizationGroup}'
        key authorizationGroup,
        @Common.Label: '{bi18n>authorizationGroupObj}'
        key authorizationGroupObject,
        @Common.Label: '{bi18n>Description}'
        to_AuthorizationGroupTextDescription.authorizationGroupDescription as description
    };

    entity AuthorizationGroupCodeText as projection on AuthorizationGroupModel.AuthorizationGroupText{
    *,
	key authorizationGroup,
	key authorizationGroupObject,
	key languageCode
    }
    ;

    entity TaxCategoryCode as projection on TaxCategoryModel.TaxCategory{
    @Common.Label: '{bi18n>TaxNumberCategory}'
    key taxNumberCategory,
    @Common.Label: '{bi18n>Description}'
    to_TaxCategoryTextDescription.description as description
    };

    entity TaxCategoryCodeText as projection on TaxCategoryModel.TaxCategoryText{
    *,
	key taxNumberCategory,
	key languageCode
    }
    ;

    entity Department as projection on ContactPersonDepartmentModel.Department{
        @Common.Text : ![departmentName]
        key ContactPersonDepartment,
        to_DepartmentTextDescription.ContactPersonDepartmentName as departmentName

    };
    entity DepartmentText as projection on ContactPersonDepartmentModel.DepartmentText{
    *,
	key ContactPersonDepartment,
	key languageCode
    };

    entity Function as projection on ContactPersonFunctionModel.Function{
        @Common.Text : ![functionName]
        key ContactPersonFunction,
        to_FunctionTextDescription.ContactPersonFunctionName as functionName

    };
    entity FunctionText as projection on ContactPersonFunctionModel.FunctionText{
    *,
	key ContactPersonFunction,
	key languageCode
    }
    ;

    entity Status as projection on BusinessPartnerStatus.Status{
        @Common.Text: ![description]
        key code,
        to_StatusTextDescription.description as description
    };
    entity StatusText as projection on BusinessPartnerStatus.StatusText{
    *,
	key code,
	key languageCode
    };

	view BusinessPartnerContactPerson as select from BusinessPartner
	{	Id,
		BusinessPartner,
		BusinessPartenrFullName,
		firstName,
		lastName,
        BirthDate
	}where Category = 1;

    view LandlinePhone as select from Phone{
			key Id,
            IsDefaultPhoneNumber,
            DestinationLocationCountry,
            Number,
            NumberType,
            NumberExtension,
			Parent_Id,
            to_CountryCode : redirected to CountryCode,
			to_Parent: redirected to Address

        }excluding{
        to_CountryCode,
        to_Parent
     }where NumberType = ' ' OR NumberType = '1';


    view CellPhone as select from Phone{

            key Id,
            IsDefaultPhoneNumber,
            DestinationLocationCountry,
            Number,
            NumberType,
            NumberExtension,
			Parent_Id,
            to_CountryCode : redirected to CountryCode,
			to_Parent: redirected to Address

        }excluding{
        to_CountryCode,
        to_Parent
     }where NumberType = '2' OR NumberType = '3';



    view GenderCode as select from GenericDomainCode{
    *
    }where domainName='GENDER';


    view PersonTitleCode as select from FormOfAddressCode{
    *
    }where isPerson=true;


     view OrgTitleCode as select from FormOfAddressCode{
    *
    }where isOrganization=true;


	type DuplicateBP : {
    Score : String(3);
	Id : CommonTypes.Id;
	BusinessPartnerCategory: CommonTypes.BusinessPartnerCategory;
	BusinessPartnerNumber : CommonTypes.BusinessPartnerNumber;
	OrganizationName1       : CommonTypes.AddressName;
	OrganizationName2       : CommonTypes.AddressName;
    OrganizationName3       : CommonTypes.AddressName;
    OrganizationName4       : CommonTypes.AddressName;
	FirstName               : CommonTypes.AddressName;
    LastName                : CommonTypes.AddressName;
    SearchTerm1             : String(20);
    SearchTerm2             : String(20);
	HouseNumber 			: CommonTypes.AddressNumber;
	StreetName 				: CommonTypes.AddressName;
	Region 						: CommonTypes.Region;
	CityName 					: CommonTypes.AddressName;
	Country 				: CommonTypes.Country;
	PoBox						: String(10);
	PostalCode 					: CommonTypes.PostalCode;

	}

	function getDuplicates(
	BusinessPartnerCategory: CommonTypes.BusinessPartnerCategory,
	OrganizationName1 : CommonTypes.AddressName,
	OrganizationName2 : CommonTypes.AddressName,
	OrganizationName3       : CommonTypes.AddressName,
	OrganizationName4       : CommonTypes.AddressName,
	FirstName               : CommonTypes.AddressName,
    LastName                : CommonTypes.AddressName,
    SearchTerm1             : String(20),
    SearchTerm2             : String(20),
	HouseNumber 			: CommonTypes.AddressNumber,
	StreetName 				: CommonTypes.AddressName,
	Region 					: CommonTypes.Region,
	CityName 				: CommonTypes.AddressName,
	Country 				: CommonTypes.Country,
	PoBox					: String(10),
	PostalCode 				: CommonTypes.PostalCode
	) returns array of MD_BUSINESS_PARTNER.DuplicateBP;

	action CreateBusinessPartnerWithConsentUI(
           DataSubjectId 			: ConsentTypes.TDataSubjectId,
           TemplateName 			:  ConsentTypes.TTemplateName not null,
           LanguageCode 			: ConsentTypes.TLanguageCode not null,
           DataSubjectTypeName 		: ConsentTypes.TDataSubjectTypeName,
           DataSubjectDescription 	: ConsentTypes.TDescription not null,
           ValidFrom 				: Timestamp,
           GrantedBy 				: ConsentTypes.TGrantedBy,
           GrantedAt 				: ConsentTypes.TGrantedAt,
           SubmissionSite 			: ConsentTypes.TConsentSubmissionSite,
           BusinessPartner 			: CommonTypes.BusinessPartnerNumber,
           Category 				: String(1) not null,
           AuthorizationGroup 		: String(4),
           FirstName 				: CommonTypes.AddressName,
           LastName 				: CommonTypes.AddressName,
           OrganizationName1 		: CommonTypes.AddressName,
           OrganizationName2 		: CommonTypes.AddressName,
           OrganizationName3 		: CommonTypes.AddressName,
           OrganizationName4		: CommonTypes.AddressName,
           HouseNumber 				: CommonTypes.AddressNumber,
           StreetName				: CommonTypes.AddressName,
           Region 					: CommonTypes.Region,
		   CityName 				: CommonTypes.AddressName,
		   Country 					: CommonTypes.Country,
		   PoBox					: String(10),
		   PostalCode 				: CommonTypes.PostalCode



   ) returns array of MD_BUSINESS_PARTNER.BusinessPartnerWithConsent;
    type BusinessPartnerWithConsent :{
    Id : CommonTypes.Id;
    BusinessPartnerCategory: CommonTypes.BusinessPartnerCategory;
    BusinessPartnerNumber : CommonTypes.BusinessPartnerNumber;
    OrganizationName1       : CommonTypes.AddressName;
    LastName                : CommonTypes.AddressName;
    ConsentTemplateName :  ConsentTypes.TTemplateName;
    ConsentTemplateId :  CommonTypes.Id;
    ConsentId : CommonTypes.Id;
	}

    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
    view BusinessPartnerBankPDM as select from BusinessPartnerBank{
      *,
      to_Parent: redirected to BusinessPartner,
	  to_CountryCode : redirected to CountryCode,
	  to_CountryCode.CountryISOFullName as countryDescription
    }excluding{
        to_Parent,
		to_CountryCode
     };

	@sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
    entity BusinessPartnerBank as projection on BusinessPartnerModel.BusinessPartnerBank{
      *,
      to_Parent: redirected to BusinessPartner,
	  to_CountryCode : redirected to CountryCode
    }excluding{
        to_Parent,
		to_CountryCode
     };

    annotate BusinessPartnerBank with {
    @Search.defaultSearchElement: true
    BankIdentification;
    @Search.defaultSearchElement: true
    BankAccount;
    @Search.defaultSearchElement: true
    BankCountryKey;
    @Search.defaultSearchElement: true
    BankNumber;
    @Search.defaultSearchElement: true
    BankAccountName;
    @Search.defaultSearchElement: true
    BankAccountHolderName;
    @Search.defaultSearchElement: true
    IBAN;
	};

    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true, }
    view Supplier as select from BusinessPartnerModel.Supplier{
        *,
        to_Parent: redirected to BusinessPartner,
        to_AddressInformation: redirected to AddressInformation,
        to_CompanyCode        : redirected to SupplierCompany,
        to_SupplierPurchasing : redirected to SupplierPurchasingOrg
    }excluding{
        to_Parent,
        to_AddressInformation,
        to_CompanyCode,
        to_SupplierPurchasing
     };

    annotate Supplier with {
    @Search.defaultSearchElement: true
    Supplier;
    @Search.defaultSearchElement: true
    SupplierAccountGroup;
    @Search.defaultSearchElement: true
    AlternativePayee;
    @Search.defaultSearchElement: true
    ResponsibleType
	};

    /*view Supplier as select from BusinessPartnerModel.Supplier mixin{
        currentDefaultAddressInformation : Association to one CurrentDefaultAddressInformation on
        currentDefaultAddressInformation.Parent_Id = $projection.Id and currentDefaultAddressInformation.ValidityStartDate <= now() and
        currentDefaultAddressInformation.ValidityEndDate >= now();
    }
    into{
     *,
     currentDefaultAddressInformation
    }excluding{
        to_Parent,
        to_AddressInformation
        //to_CompanyCode,
        //to_SupplierPurchasing
     }; */


     entity CompanyCodeValueHelp as projection on SupplierConfigurationModel.CompanyCode{
        @Common.Label: '{bi18n>CompanyCodes}'
    	key Code,
        @Common.Label: '{bi18n>Description}'
        to_CompanyCodeTextDescription.description as description
    };
     entity PurchasingGroupValueHelp as projection on SupplierConfigurationModel.PurchasingGroup{
        @Common.Label: '{bi18n>PurchasingGroupCode}'
        key PurchasingGroup,
        @Common.Label: '{bi18n>Description}'
        to_PurchasingGroupTextDescription.description as description
    };
    entity PurchasingOrgValueHelp as projection on SupplierConfigurationModel.PurchasingOrg{
        @Common.Label: '{bi18n>PurchasingOrgCode}'
        key PurchaseOrgCode,
        @Common.Label: '{bi18n>Description}'
        to_PurchasingOrgTextDescription.description as description
    };

    entity LayoutSortingRuleValueHelp as projection on SupplierConfigurationModel.LayoutSortingRule{
        @Common.Label: '{bi18n>LayoutSortingRule}'
        key SortKey,
        @Common.Label: '{bi18n>Description}'
        to_LayoutSortingRuleTextDescription.description as description
    };

    entity MinorityIndicatorValueHelp as projection on SupplierConfigurationModel.MinorityIndicator{
        @Common.Label: '{bi18n>MinorityIndicator}'
        key Indicator,
        @Common.Label: '{bi18n>Description}'
        to_MinorityIndicatorTextDescription.description as description
    };

     entity BlockingReasonValueHelp as projection on SupplierConfigurationModel.BlockingReason{
        @Common.Label: '{bi18n>PaymentBlockingReason}'
        key BlockKey,
        @Common.Label: '{bi18n>Description}'
        to_BlockingReasonTextDescription.description as description
    };

	entity SalesGroupValueHelp as projection on SalesGroupModel.SalesGroup{
        @Common.Label: '{bi18n>SalesGroup}'
        key salesGroupCode,
        @Common.Label: '{bi18n>Description}'
        to_SalesGroupTextDescription.shortDescription as description
    };

	entity PaymentTermsValueHelp as projection on PaymentTermsModel.PaymentTerms{
		@Common.Label: '{bi18n>PaymentTerms}'
		key paymentTermsCode,
		@Common.Label: '{bi18n>Description}'
		to_PaymentTermsTextDescription.shortDescription as description
	};

	entity PaymentMethodValueHelp as projection on SupplierConfigurationModel.PaymentMethod{
		@Common.Label: '{bi18n>PaymentMethodsCode}'
		key PaymentMethodCode,
		@Common.Label: '{bi18n>Description}'
		to_PaymentMethodTextDescription.description as description
	};

	entity ReconciliationAccountValueHelp as projection on SupplierConfigurationModel.ReconciliationAccount{
		  @Common.Label: '{bi18n>CompanyCode}'
		key CompanyCode,
		 @Common.Label: '{bi18n>AccountNumber}'
		key AccountNumber,
		@Common.Label: '{bi18n>Description}'
		to_ReconciliationAccountTextDescription.description as description
	};

    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:false, Updatable:true, Deletable:false, }
    entity SupplierCompany as projection on BusinessPartnerModel.SupplierCompany{
    *,
    @Common.FieldControl: #ReadOnly
    CompanyCode,
    @Common.FieldControl: #ReadOnly
    ReconciliationAccount,
    @Common.FieldControl: #ReadOnly
    HouseBank
    };

    annotate SupplierCompany with {
    @Search.defaultSearchElement: true
    CompanyCode;
    @Search.defaultSearchElement: true
    ReconciliationAccount;
    @Search.defaultSearchElement: true
    LayoutSortingRule;
    @Search.defaultSearchElement: true
    MinorityGroup;
    @Search.defaultSearchElement: true
    PaymentTerms;
    @Search.defaultSearchElement: true
    PaymentMethodsList;
    @Search.defaultSearchElement: true
    HouseBank;
    @Search.defaultSearchElement: true
    CashPlanningGroup;
    @Search.defaultSearchElement: true
    AccountingClerk;
    @Search.defaultSearchElement: true
    AccountingClerkPhoneNumber;
    @Search.defaultSearchElement: true
    AlternativePayee;
    @Search.defaultSearchElement: true
    APARToleranceGroup;
	};

    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true, }
    entity BusinessPartnerWhldgTax as projection on BusinessPartnerModel.BusinessPartnerWhldgTax;

    annotate BusinessPartnerWhldgTax with {
    @Search.defaultSearchElement: true
    WithholdingTaxType;
    @Search.defaultSearchElement: true
    WithholdingTaxCode;
    @Search.defaultSearchElement: true
    WithholdingTaxNumber;
    @Search.defaultSearchElement: true
    ExemptionReason;
    @Search.defaultSearchElement: true
    RecipientType;
	};


    @sap.searchable: 'true'
    @Capabilities.SearchRestrictions.Searchable: true
    @Capabilities: { Insertable:false, Updatable:true, Deletable:false, }
    entity SupplierPurchasingOrg as projection on BusinessPartnerModel.SupplierPurchasingOrg{
    *,
    @Common.FieldControl: #ReadOnly
    PurchasingOrganization,
    @Common.FieldControl: #ReadOnly
    IncotermsClassification,
    @Common.FieldControl: #ReadOnly
    IncotermsTransferLocation
    };

    annotate SupplierPurchasingOrg with {
    @Search.defaultSearchElement: true
    PurchasingOrganization;
    @Search.defaultSearchElement: true
    PurchaseOrderCurrency;
    @Search.defaultSearchElement: true
    PaymentTerms;
    @Search.defaultSearchElement: true
    IncotermsClassification;
    @Search.defaultSearchElement: true
    CalculationSchemaGroupCode;
    @Search.defaultSearchElement: true
    PurchasingGroup;
	};
	view AlternativePayeeVH as select from Supplier{
            key Supplier
        };
	@sap.searchable: 'true'
	@Capabilities: { Insertable:false, Updatable:false, Deletable:false, }
	entity SupplierPartnerFunction as projection on BusinessPartnerModel.SupplierPartnerFunction;

    annotate SupplierPartnerFunction with {
    @Search.defaultSearchElement: true
    PartnerFunction;
    @Search.defaultSearchElement: true
    PartnerNumber;
	};

	view SupplierAccountGroupCode as select from CustomerAccountGroupModel.CustomerAccountGroup{
	@Common.Label: '{bi18n>AccountGroup}'
	key customerAccountGroupCode,
	@Common.Label: '{bi18n>Description}'
    to_CustomerAccountGroupTextDescription.shortDescription as description
    } where isSupplierRelevant = true;

    	entity TaxType as projection on SupplierConfigurationModel.ResponsibleTypeEntry{
		@Common.Label: '{bi18n>TaxType}'
		key ResponsibleType,
		@Common.Label: '{bi18n>Description}'
		to_ResponsibleTypeEntryTextDescription.description as description
	};

    @sap.searchable: 'true'
    view GenericConfigurations as select from GenericConfigurationsModel.GenericConfigurations{
    *
    }WHERE ConfigurationName = 'Harmonized Numbers';

/*    @sap.searchable: 'true'
    @Capabilities: { Insertable:true, Updatable:true, Deletable:true, }
    entity WithholdingTax as projection on BusinessPartnerModel.WithholdingTax;*/

     // Service definition for Supplier entities[End]
};
