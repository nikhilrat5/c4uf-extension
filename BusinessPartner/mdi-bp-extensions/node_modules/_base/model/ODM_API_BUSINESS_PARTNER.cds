using com.sap.mdm.bp.CommonTypes as CommonTypes from './CommonTypes';
using com.sap.mdm.bp.BusinessPartnerModel as BusinessPartnerModel from './BusinessPartner';
using com.sap.mdm.bp.AddressModel as AddressModel from './AddressModel';
using com.sap.mdm.bp.BusinessPartnerRelationshipModel as BusinessPartnerRelationshipModel from './BusinessPartnerRelationship';
using com.sap.mdm.bp.ConsentTypes as ConsentTypes from './ConsentTypes';

@cds.query.limit : 25
service ODM_API_BUSINESS_PARTNER {

    @sap.searchable                             : 'true'
    @Capabilities                               : {
        Insertable : true,
        Updatable  : true,
        Deletable  : false,
    }
    @Capabilities.SearchRestrictions.Searchable : true
    view BusinessPartner as
        select from BusinessPartnerModel.BusinessPartner
        mixin {
            person               : Association to one PersonDetails
                                       on person.parent_id = Id;
            organization         : Association to one OrganizationDetails
                                       on organization.parent_id = Id;
            identifications      : Association to many Identification
                                       on identifications.parent_id = Id;
            bankAccounts         : Association to many BankAccount
                                       on bankAccounts.parent_id = Id;
            taxNumbers           : Association to many TaxNumber
                                       on taxNumbers.parent_id = Id;
            addressData          : Association to many AddressData
                                       on addressData.parent_id = Id;
            roles                : Association to many Role
                                       on roles.parent_id = Id;
            customerInformation  : Association to one CustomerInformation
                                       on customerInformation.parent_id = Id;
            supplierInformation  : Association to one SupplierInformation
                                       on supplierInformation.parent_id = Id;
            businessPartnerGroup : Association to one BusinessPartnerGroupDetails
                                       on businessPartnerGroup.parent_id = Id;
            searchTerms          : Association to one SearchTerms
                                       on searchTerms.id = Id
        }
        into {
            key Id                              as id,
                //BusinessPartner                 as displayId,
                Category                        as businessPartnerType,
                CreatedByUser                   as createdByUuid,
                CreationDate                    as createdAt,
                LastChangedByUser               as modifiedByUuid,
                LastChangeDate                  as modifiedAt,
                @ODM.codelist
                Status                          as lifecycleStatus,
                IsBlocked                       as isBlocked,
                BusinessPartnerPrintFormat      as businessPartnerPrintFormat,
                BusinessPartnerPrintLargeFormat as businessPartnerPrintLargeFormat,
                person,
                organization,
                identifications,
                taxNumbers,
                roles,
                bankAccounts,
                customerInformation,
                supplierInformation,
                addressData,
                businessPartnerGroup,
                searchTerms,
                @ODM.codelist
                AuthorizationGroup              as authorizationGroup,
                @ODM.codelist
                BusinessPartnerGrouping         as grouping,
                IsNaturalPerson                 as isNaturalPersonUnderTaxLaw,
                @ODM.codelist
                ContactPermission               as contactPermission,
                IsMarkedForDeletion             as meantToBeArchived,
                IsReleased                      as isReleased
        };

    view SearchTerms as
        select from BusinessPartnerModel.BusinessPartner {
                @mdm.ignore
            key Id          as id,
                SearchTerm1 as searchTerm1,
                SearchTerm2 as searchTerm2
        };

    @sap.searchable                             : 'true'
    @Capabilities                               : {
        Insertable : true,
        Updatable  : true,
        Deletable  : false,
    }
    @Capabilities.SearchRestrictions.Searchable : true
    view PersonDetails as
        select from BusinessPartnerModel.Person
        mixin {
            owner           : Association to one BusinessPartner
                                  on owner.person = $self;
            nameDetails     : Association to one ScriptedPersonName
                                  on nameDetails.id = Id;
            businessPartner : Association to one BusinessPartnerModel.BusinessPartner
                                  on businessPartner.Id = Parent_Id;
        }
        into {
                @mdm.ignore
            key Id                                     as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id                              as parent_id,
                @ODM.codelist
                Gender                                 as gender,
                BirthDate                              as birthDate,
                @ODM.codelist
                Nationality                            as nationality,
                @ODM.codelist
                businessPartner.Language               as language,
                @ODM.codelist
                businessPartner.CorrespondenceLanguage as correspondenceLanguage,
                @mdm.parent
                owner,
                nameDetails,
                @ODM.codelist
                MaritalStatus                          as maritalStatus,
                NaturalPersonEmployerName              as employerName,
                @ODM.codelist
                BusinessPartnerOccupationGroup         as occupation,
                BusinessPartnerBirthplaceName          as birthplaceName,
                BusinessPartnerDeathDate               as deathDate
        };

    view ScriptedPersonName as
        select from BusinessPartnerModel.Person
        mixin {
            owner           : Association to one PersonDetails
                                  on owner.nameDetails = $self;
            scriptVariants  : Association to many PersonName
                                  on  scriptVariants.id         = Id
                                  and scriptVariants.scriptCode = ScriptCode;
            businessPartner : Association to one BusinessPartnerModel.BusinessPartner
                                  on businessPartner.Id = Parent_Id;
        }
        into {
                @mdm.ignore
            key Id                       as id,
                @mdm.ignore
            key Parent_Id                as parent_id,
                @ODM.codelist
                @mdm.ignore
                ScriptCode               as scriptCode,
                FirstName                as firstName,
                MiddleName               as middleName,
                LastName                 as lastName,
                AdditionalLastName       as secondLastName,
                Initials                 as initials,
                @ODM.codelist
                FormOfAddress            as formOfAddress,
                @ODM.codelist
                AcademicTitle            as academicTitle,
                @ODM.codelist
                AdditionalAcademicTitle  as additionalAcademicTitle,
                @ODM.codelist
                LastNamePrefix           as namePrefix,
                @ODM.codelist
                AdditionalNamePrefix     as additionalNamePrefix,
                @ODM.codelist
                NameSupplement           as nameSuffix,
                //language_code from BP
                //correspondenceLanguage_code from BP
                @mdm.parent
                owner,
                scriptVariants,
                BirthName                as birthName,
                NickName                 as nickName,
                //NaturalPersonEmployerName      as naturalPersonEmployerName,
                //BusinessPartnerOccupationGroup as businessPartnerOccupationGroup,
                //BusinessPartnerBirthplaceName  as businessPartnerBirthplaceName,
                //BusinessPartnerDeathDate       as businessPartnerDeathDate,
                NameFormat               as nameFormat,
                @ODM.codelist
                NameCountry              as nameCountry,
                businessPartner.FullName as formattedPersonName
        };

    view PersonName as
        select from BusinessPartnerModel.Person
        mixin {
            owner : Association to one ScriptedPersonName
                        on owner.scriptVariants = $self;
        }
        into {
                @mdm.ignore
            key Id                      as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id               as parent_id,
                @ODM.codelist
                @mdm.odm.semantic.key
                ScriptCode              as scriptCode,
                FirstName               as firstName,
                MiddleName              as middleName,
                LastName                as lastName,
                AdditionalLastName      as secondLastName,
                Initials                as initials,
                @ODM.codelist
                FormOfAddress           as formOfAddress,
                @ODM.codelist
                AcademicTitle           as academicTitle,
                @ODM.codelist
                AdditionalAcademicTitle as additionalAcademicTitle,
                @ODM.codelist
                LastNamePrefix          as namePrefix,
                @ODM.codelist
                AdditionalNamePrefix    as additionalNamePrefix,
                @ODM.codelist
                NameSupplement          as nameSuffix,
                BirthName               as birthName,
                NickName                as nickName,
                //NaturalPersonEmployerName      as naturalPersonEmployerName,
                //BusinessPartnerOccupationGroup as businessPartnerOccupationGroup,
                //BusinessPartnerBirthplaceName  as businessPartnerBirthplaceName,
                //BusinessPartnerDeathDate       as businessPartnerDeathDate,
                NameFormat              as nameFormat,
                @ODM.codelist
                NameCountry             as nameCountry,
                @mdm.parent
                owner
        };

    view OrganizationDetails as
        select from BusinessPartnerModel.Organization
        mixin {
            owner       : Association to one BusinessPartner
                              on owner.organization = $self;
            nameDetails : Association to one ScriptedOrganizationName
                              on nameDetails.id = Id;
            industries  : Association to many Industry
                              on industries.parent_id = Parent_Id;
        }
        into {
                @mdm.ignore
            key Id                   as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id            as parent_id,
                @ODM.codelist
                LegalForm            as legalForm,
                FoundationDate       as foundationDate,
                LiquidationDate      as liquidationDate,
                GlobalLocationNumber as globalLocationNumber,
                @mdm.parent
                owner,
                nameDetails,
                industries
        };

    view ScriptedOrganizationName as
        select from BusinessPartnerModel.Organization
        mixin {
            owner          : Association to one OrganizationDetails
                                 on owner.nameDetails = $self;
            scriptVariants : Association to many OrganizationName
                                 on  scriptVariants.id         = Id
                                 and scriptVariants.scriptCode = ScriptCode;
        }
        into {
                @mdm.ignore
            key Id                as id,
                @mdm.ignore
            key Parent_Id         as parent_id,
                @ODM.codelist
                @mdm.ignore
                ScriptCode        as scriptCode,
                OrganizationName1 as formattedOrgNameLine1,
                OrganizationName2 as formattedOrgNameLine2,
                OrganizationName3 as formattedOrgNameLine3,
                OrganizationName4 as formattedOrgNameLine4,
                @mdm.parent
                owner,
                scriptVariants,
                @ODM.codelist
                FormOfAddress     as formOfAddress
        };

    view OrganizationName as
        select from BusinessPartnerModel.Organization
        mixin {
            owner : Association to one ScriptedOrganizationName
                        on owner.scriptVariants = $self;
        }
        into {
                @mdm.ignore
            key Id                as id,
                @mdm.ignore
            key Parent_Id         as parent_id,
                @mdm.odm.semantic.key
                @ODM.codelist
                ScriptCode        as scriptCode,
                OrganizationName1 as formattedOrgNameLine1,
                OrganizationName2 as formattedOrgNameLine2,
                OrganizationName3 as formattedOrgNameLine3,
                OrganizationName4 as formattedOrgNameLine4,
                @mdm.parent
                owner,
                @ODM.codelist
                FormOfAddress     as formOfAddress

        };

    view Identification as
        select from BusinessPartnerModel.Identification
        mixin {
            owner : Association to one BusinessPartner
                        on owner.identifications = $self;
        }
        into {
                @mdm.ignore
            key Id                   as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id            as parent_id,
                @ODM.codelist
                @mdm.odm.semantic.key
                IdentificationType   as identificationType,
                EntryDate            as entryDate,
                @ODM.codelist
                Country              as country,
                @ODM.codelist
                Region               as region,
                Institute            as institute,
                @mdm.odm.semantic.key
                IdentificationNumber as identificationNumber,
                ValidityStartDate    as validFrom,
                ValidityEndDate      as validTo,
                @mdm.parent
                owner
        };

    view BankAccount as
        select from BusinessPartnerModel.BusinessPartnerBank
        mixin {
            owner : Association to one BusinessPartner
                        on owner.bankAccounts = $self;
        //bankDetails : Association to one BankDetail
        //                  on bankDetails.id = Id;
        }
        into {
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id                as parent_id,

                @mdm.parent
                owner,
                ValidityStartDate        as validFrom,
                ValidityEndDate          as validTo,
                @ODM.codelist
                BankCountryKey           as bankCountry,
                BankAccountHolderName    as bankAccountHolderName,
                IBAN                     as IBAN,
                BankAccount              as bankAccount,
                BankNumber               as bankNumber,
                BankControlKey           as bankControlKey,
                BankAccountReferenceText as bankAccountReference,
                BankAccountName          as bankAccountName,
                @mdm.odm.semantic.key
            key BankIdentification       as id

        };
    /*
      view BankDetail as
            select from BusinessPartnerModel.BusinessPartnerBank
            mixin {
                owner          : Association to one BankAccount
                                     on owner.bankDetails = $self;
                bankIdentifier : Association to one BankIdentifier
                                     on bankIdentifier.id = Id;
            }
            into {
                    @mdm.ignore
                key Id                       as id,
                    @mdm.ignore
                key Parent_Id                as parent_id,
                    ValidityStartDate        as validFrom,
                    ValidityEndDate          as validTo,
                    @ODM.codelist
                    BankCountryKey           as bankCountry,
                    BankAccountHolderName    as bankAccountHolderName,
                    IBAN                     as iban,
                    BankAccount              as bankAccount,
                    BankControlKey           as bankControlKey,
                    BankAccountReferenceText as bankAccountReference,
                    //createdBy,
                    //modifiedBy,
                    CreationDate             as createdAt,
                    LastChangeDate           as modifiedAt,
                    @mdm.parent
                    owner,
                    bankIdentifier

            };*/

    /*view BankIdentifier as
          select from BusinessPartnerModel.BusinessPartnerBank
          mixin {
              owner : Association to one BankDetail
                          on owner.bankIdentifier = $self;
          }
          into {
                  @mdm.ignore
              key Id                 as id,
                  @mdm.ignore
              key Parent_Id          as parent_id,
                  CreatedByUser      as createdBy,
                  CreationDate       as createdAt,
                  LastChangedByUser  as modifiedBy,
                  LastChangeDate     as modifiedAt,
                  @mdm.odm.semantic.key
                  BankIdentification as displayId,
                  BankAccountName    as name,
                  BankNumber         as bankNumber,
                  @mdm.parent
                  owner
          };*/


    view TaxNumber as
        select from BusinessPartnerModel.TaxNumber
        mixin {
            owner : Association to one BusinessPartner
                        on owner.taxNumbers = $self;
        }
        into {
                @mdm.ignore
            key Id                as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id         as parent_id,
                @ODM.codelist
                @mdm.odm.semantic.key
                TaxNumberCategory as taxNumberType,
                TaxNumber         as taxNumber,
                @mdm.parent
                owner
        // CreatedByUser as
        };

    view Role as
        select from BusinessPartnerModel.Role as r
        mixin {
            owner : Association to one BusinessPartner
                        on owner.roles = $self;
        }
        into {
                @mdm.ignore
            key r.Id                as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key r.Parent_Id         as parent_id,
                @ODM.codelist
                @mdm.odm.semantic.key
                r.Role              as role,
                r.ValidityStartDate as validFrom,
                r.ValidityEndDate   as validTo,
                @mdm.parent
                owner
        };


    //as AI join AddressModel.Address as A on AI.Address_Id = A.Id
    @sap.searchable                             : 'true'
    @Capabilities                               : {
        Insertable : true,
        Updatable  : true,
        Deletable  : false,
    }
    @Capabilities.SearchRestrictions.Searchable : true
    view AddressData as
        select from BusinessPartnerModel.AddressInformation
        mixin {
            owner   : Association to BusinessPartner
                          on owner.addressData = $self;
            address : Association to Address
                          on address.id = Address_Id;

        }
        into {
                @mdm.odm.semantic.key
            key Address_Id                        as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id                         as parent_id,
                // geocoordinates
                ValidityStartDate                 as validFrom,
                ValidityEndDate                   as validTo,
                IsIndependent                     as isIndependent,
                address.postalAddressType         as postalAddressType,
                @mdm.parent
                owner,
                address.emailAddresses            as emailAddresses,
                address.phoneNumbers              as phoneNumbers,
                address.faxNumbers                as faxNumbers,
                address.websites                  as websites,
                address.personPostalAddress       as personPostalAddress,
                address.organizationPostalAddress as organizationPostalAddress,
                address.usages                    as usages,
                address.communicationPreferences  as communicationPreferences

        };

    view Address as
        select from AddressModel.Address
        mixin {
            emailAddresses            : Association to many Email
                                            on emailAddresses.parent_id = Id;
            phoneNumbers              : Association to many Phone
                                            on phoneNumbers.parent_id = Id;
            faxNumbers                : Association to many Fax
                                            on faxNumbers.parent_id = Id;
            websites                  : Association to many Website
                                            on websites.parent_id = Id;
            personPostalAddress       : Association to one PersonAddress
                                            on personPostalAddress.parent_id = Id;
            organizationPostalAddress : Association to one OrganizationAddress
                                            on organizationPostalAddress.parent_id = Id;
            usages                    : Association to many AddressDataUsage
                                            on usages.address_id = Id;
            communicationPreferences  : Association to one CommunicationPreferences
                                            on communicationPreferences.id = Id;
        }
        into {
                @mdm.ignore
                @mdm.parent.entity.column : 'Address_Id'
            key Id          as id,
                AddressType as postalAddressType,
                usages,
                emailAddresses,
                phoneNumbers,
                faxNumbers,
                websites,
                personPostalAddress,
                organizationPostalAddress,
                communicationPreferences

        };

    view CommunicationPreferences as
        select from AddressModel.Address {
                @mdm.ignore
                @mdm.parent.entity.column : 'Address_Id'
            key Id                                             as id,
                @ODM.codelist
                PrfrdCommMediumType                            as communicationMethod,
                @ODM.codelist
                to_DefaultPostalAddress.CorrespondenceLanguage as nonVerbalCommunicationLanguage
        };

    view AddressDataUsage as
        select from BusinessPartnerModel.AddressUsage
        mixin {
            owner : Association to one AddressData
                        on owner.usages = $self;
        }
        into {
                @mdm.ignore
            key Id                as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id         as parent_id,
                @mdm.ignore
            key Address_Id        as address_id,
                @mdm.odm.semantic.key
                @ODM.codelist
                AddressUsage      as usage,
                IsDefaultAddress  as isStandard,
                ValidityStartDate as validFrom,
                ValidityEndDate   as validTo,
                @mdm.parent
                owner

        };

    view Email as
        select from AddressModel.Email
        mixin {
            owner : Association to one AddressData
                        on owner.emailAddresses = $self;
        }
        into {
                @mdm.ignore
                @mdm.odm.semantic.key
            key Id                    as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id             as parent_id,
                ValidityStartDate     as validFrom,
                ValidityEndDate       as validTo,
                IsDefaultEmailAddress as isDefault,
                EmailAddress          as address,
                UsageDeniedIndicator  as usageDeniedIndicator,
                @mdm.parent
                owner

        };

    view Phone as
        select from AddressModel.Phone
        mixin {
            owner : Association to one AddressData
                        on owner.phoneNumbers = $self;
        }
        into {
                @mdm.ignore
                @mdm.odm.semantic.key
            key Id                         as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id                  as parent_id,
                ValidityStartDate          as validFrom,
                ValidityEndDate            as validTo,
                IsDefaultPhoneNumber       as isDefault,
                @ODM.codelist
                DestinationLocationCountry as country,
                Number                     as number,
                NumberExtension            as numberExtension,
                NumberType                 as isMobile,
                UsageDeniedIndicator       as usageDeniedIndicator,
                SMSEnabledIndicator        as smsEnabledIndicator,
                @mdm.parent
                owner
        };

    view Fax as
        select from AddressModel.Fax
        mixin {
            owner : Association to one AddressData
                        on owner.faxNumbers = $self;
        }
        into {
                @mdm.ignore
                @mdm.odm.semantic.key
            key Id                         as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id                  as parent_id,
                ValidityStartDate          as validFrom,
                ValidityEndDate            as validTo,
                IsDefaultFaxNumber         as isDefault,
                @ODM.codelist
                DestinationLocationCountry as country,
                Number                     as number,
                NumberExtension            as numberExtension,
                UsageDeniedIndicator       as usageDeniedIndicator,
                @mdm.parent
                owner
        };

    view Website as
        select from AddressModel.Web
        mixin {
            owner : Association to one AddressData
                        on owner.websites = $self;
        }
        into {
                @mdm.ignore
                @mdm.odm.semantic.key
            key Id                   as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id            as parent_id,
                ValidityStartDate    as validFrom,
                ValidityEndDate      as validTo,
                IsDefaultUri         as isDefault,
                Uri                  as url,
                UriType              as uriType,
                UsageDeniedIndicator as usageDeniedIndicator,
                owner

        };

    view PersonAddress as
        select from AddressModel.PostalAddress as personPostalAddress
        mixin {
            owner          : Association to AddressData
                                 on owner.personPostalAddress = $self;
            scriptVariants : Association to many ScriptedPersonAddress
                                 on  scriptVariants.id         = Id
                                 and scriptVariants.scriptCode = ScriptCode;
            aPerson        : Association to AddressPersonName
                                 on  aPerson.parent_id  = Parent_Id
                                 and aPerson.scriptCode = ScriptCode;
            alternative    : Association to AlternativePostalData
                                 on alternative.id = Id;
        }
        into {
                @mdm.ignore
            key Id                         as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id                  as parent_id,
                aPerson.firstName,
                aPerson.middleName,
                aPerson.lastName,
                aPerson.secondLastName,
                aPerson.initials,
                @ODM.codelist
                aPerson.formOfAddress,
                @ODM.codelist
                aPerson.academicTitle,
                @ODM.codelist
                aPerson.additionalAcademicTitle,
                @ODM.codelist
                aPerson.namePrefix,
                @ODM.codelist
                aPerson.additionalNamePrefix,
                @ODM.codelist
                aPerson.nameSuffix,
                aPerson.birthName,
                aPerson.nickName,
                aPerson.nameFormat,
                @ODM.codelist
                aPerson.nameCountry,
                aPerson.formattedPersonName,
                StreetPrefixName           as streetPrefix1,
                AdditionalStreetPrefixName as streetPrefix2,
                @mdi.attribute.substitute : '{name}'
                StreetName                 as street,
                StreetSuffixName           as streetSuffix1,
                AdditionalStreetSuffixName as streetSuffix2,
                HouseNumber                as houseNumber,
                HouseNumberSupplementText  as houseNumberSupplement,
                Floor                      as floor,
                RoomNumber                 as door,
                CareOfName                 as careOf,
                @mdi.attribute.substitute : '{name}'
                CityName                   as town,
                @mdi.attribute.substitute : '{name}'
                District                   as district,
                @ODM.codelist
                Region                     as primaryRegion,
                @mdi.attribute.substitute : '{name}'
                County                     as secondaryRegion,
                @ODM.codelist
                Country                    as country,
                PostalCode                 as postCode,
                //DeliveryServiceNumber      as deliveryServiceNumber,
                CompanyPostalCode          as companyPostalCode,
                PoBoxIsWithoutNumber       as postBoxIsWithoutNumber,
                alternative,
                @ODM.codelist
                AddressTimeZone            as timeZone,
                AdditionalCityName         as additionalCityName,
                @mdm.ignore
                ScriptCode                 as scriptCode,
                scriptVariants             as scriptVariants,
                @mdm.parent
                owner,
                Building                   as building
        };

    view AlternativePostalData as
        select from AddressModel.PostalAddress as alternatePostalAddress {
                @mdm.ignore
            key Id                      as id,
                @ODM.codelist
                DeliveryServiceTypeCode as deliveryType,
                PoBoxLobbyName          as deliveryServiceQualifier,
                @ODM.codelist
                PoBoxDeviatingCountry   as country,
                PoBoxPostalCode         as postCode,
                @mdi.attribute.substitute : '{name}'
                PoBoxDeviatingCityName  as town,
                @ODM.codelist
                PoBoxDeviatingRegion    as primaryRegion,
                DeliveryServiceNumber   as deliveryServiceIdentifier,
                PoBox                   as poBoxId
        };

    view AddressPersonName as
        select from AddressModel.Person {
                @mdm.ignore
            key Id                      as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id               as parent_id,
                @ODM.codelist
                @mdm.odm.semantic.key
                ScriptCode              as scriptCode,
                FirstName               as firstName,
                MiddleName              as middleName,
                LastName                as lastName,
                AdditionalLastName      as secondLastName,
                Initials                as initials,
                @ODM.codelist
                FormOfAddress           as formOfAddress,
                @ODM.codelist
                AcademicTitle           as academicTitle,
                @ODM.codelist
                AdditionalAcademicTitle as additionalAcademicTitle,
                @ODM.codelist
                LastNamePrefix          as namePrefix,
                @ODM.codelist
                AdditionalNamePrefix    as additionalNamePrefix,
                @ODM.codelist
                NameSupplement          as nameSuffix,
                FullName                as formattedPersonName,
                BirthName               as birthName,
                NickName                as nickName,
                NameFormat              as nameFormat,
                @ODM.codelist
                NameCountry             as nameCountry
        };

    view OrganizationAddress as
        select from AddressModel.PostalAddress as orgPostalAddress
        mixin {
            owner          : Association to AddressData
                                 on owner.organizationPostalAddress = $self;
            aOrg           : Association to AddressOrganizationName
                                 on  aOrg.parent_id  = Parent_Id
                                 and aOrg.scriptCode = ScriptCode;
            alternative    : Association to AlternativePostalData
                                 on alternative.id = Id;
            scriptVariants : Association to many ScriptedOrganizationAddress
                                 on  scriptVariants.id         = Id
                                 and scriptVariants.scriptCode = ScriptCode;
        }
        into {
                @mdm.ignore
            key Id                         as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id                  as parent_id,
                @mdm.ignore
                ScriptCode                 as scriptCode,
                aOrg.formattedOrgNameLine1,
                aOrg.formattedOrgNameLine2,
                aOrg.formattedOrgNameLine3,
                aOrg.formattedOrgNameLine4,
                aOrg.formOfAddress,
                StreetPrefixName           as streetPrefix1,
                AdditionalStreetPrefixName as streetPrefix2,
                @mdi.attribute.substitute : '{name}'
                StreetName                 as street,
                StreetSuffixName           as streetSuffix1,
                AdditionalStreetSuffixName as streetSuffix2,
                HouseNumber                as houseNumber,
                HouseNumberSupplementText  as houseNumberSupplement,
                Floor                      as floor,
                RoomNumber                 as door,
                CareOfName                 as careOf,
                @mdi.attribute.substitute : '{name}'
                CityName                   as town,
                @mdi.attribute.substitute : '{name}'
                District                   as district,
                @ODM.codelist
                Region                     as primaryRegion,
                @mdi.attribute.substitute : '{name}'
                County                     as secondaryRegion,
                @ODM.codelist
                Country                    as country,
                PostalCode                 as postCode,
                CompanyPostalCode          as companyPostalCode,
                PoBoxIsWithoutNumber       as postBoxIsWithoutNumber,
                alternative,
                @ODM.codelist
                AddressTimeZone            as timeZone,
                //DeliveryServiceNumber      as deliveryServiceNumber,
                AdditionalCityName         as additionalCityName,
                scriptVariants             as scriptVariants,
                @mdm.parent
                owner,
                Building                   as building
        };

    view AddressOrganizationName as
        select from AddressModel.Organization {
                @mdm.ignore
            key Id                as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id         as parent_id,
                @ODM.codelist
                @mdm.odm.semantic.key
                ScriptCode        as scriptCode,
                OrganizationName1 as formattedOrgNameLine1,
                OrganizationName2 as formattedOrgNameLine2,
                OrganizationName3 as formattedOrgNameLine3,
                OrganizationName4 as formattedOrgNameLine4,
                @ODM.codelist
                FormOfAddress     as formOfAddress

        };

    view ScriptedOrganizationAddress as
        select from AddressModel.PostalAddress as scriptedorgPostalAddress
        mixin {
            owner       : Association to AddressData
                              on owner.organizationPostalAddress = $self;
            aOrg        : Association to AddressOrganizationName
                              on  aOrg.parent_id  = Parent_Id
                              and aOrg.scriptCode = ScriptCode;
            alternative : Association to AlternativePostalData
                              on alternative.id = Id;
        }
        into {
                @mdm.ignore
            key Id                         as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id                  as parent_id,
                @mdm.odm.semantic.key
                @ODM.codelist
                ScriptCode                 as scriptCode,
                aOrg.formattedOrgNameLine1,
                aOrg.formattedOrgNameLine2,
                aOrg.formattedOrgNameLine3,
                aOrg.formattedOrgNameLine4,
                aOrg.formOfAddress,
                StreetPrefixName           as streetPrefix1,
                AdditionalStreetPrefixName as streetPrefix2,
                @mdi.attribute.substitute : '{name}'
                StreetName                 as street,
                StreetSuffixName           as streetSuffix1,
                AdditionalStreetSuffixName as streetSuffix2,
                HouseNumber                as houseNumber,
                HouseNumberSupplementText  as houseNumberSupplement,
                Floor                      as floor,
                RoomNumber                 as door,
                CareOfName                 as careOf,
                @mdi.attribute.substitute : '{name}'
                CityName                   as town,
                @mdi.attribute.substitute : '{name}'
                District                   as district,
                @ODM.codelist
                Region                     as primaryRegion,
                @mdi.attribute.substitute : '{name}'
                County                     as secondaryRegion,
                @ODM.codelist
                Country                    as country,
                PostalCode                 as postCode,
                CompanyPostalCode          as companyPostalCode,
                PoBoxIsWithoutNumber       as postBoxIsWithoutNumber,
                alternative,
                @ODM.codelist
                AddressTimeZone            as timeZone,
                // DeliveryServiceNumber      as deliveryServiceNumber,
                AdditionalCityName         as additionalCityName,
                @mdm.parent
                owner,
                Building                   as building
        };


    view ScriptedPersonAddress as
        select from AddressModel.PostalAddress as scriptedPersonPostalAddress
        mixin {
            owner       : Association to AddressData
                              on owner.personPostalAddress = $self;
            aPerson     : Association to AddressPersonName
                              on  aPerson.parent_id  = Parent_Id
                              and aPerson.scriptCode = ScriptCode;
            alternative : Association to AlternativePostalData
                              on alternative.id = Id;
        }
        into {
                @mdm.ignore
            key Id                         as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id                  as parent_id,
                @mdm.odm.semantic.key
                @ODM.codelist
                ScriptCode                 as scriptCode,
                aPerson.firstName,
                aPerson.middleName,
                aPerson.lastName,
                aPerson.secondLastName,
                aPerson.initials,
                @ODM.codelist
                aPerson.formOfAddress,
                @ODM.codelist
                aPerson.academicTitle,
                @ODM.codelist
                aPerson.additionalAcademicTitle,
                @ODM.codelist
                aPerson.namePrefix,
                @ODM.codelist
                aPerson.additionalNamePrefix,
                @ODM.codelist
                aPerson.nameSuffix,
                aPerson.birthName,
                aPerson.nickName,
                aPerson.nameFormat,
                @ODM.codelist
                aPerson.nameCountry,
                aPerson.formattedPersonName,
                StreetPrefixName           as streetPrefix1,
                AdditionalStreetPrefixName as streetPrefix2,
                @mdi.attribute.substitute : '{name}'
                StreetName                 as street,
                StreetSuffixName           as streetSuffix1,
                AdditionalStreetSuffixName as streetSuffix2,
                HouseNumber                as houseNumber,
                HouseNumberSupplementText  as houseNumberSupplement,
                Floor                      as floor,
                RoomNumber                 as door,
                CareOfName                 as careOf,
                @mdi.attribute.substitute : '{name}'
                CityName                   as town,
                @mdi.attribute.substitute : '{name}'
                District                   as district,
                @ODM.codelist
                Region                     as primaryRegion,
                @mdi.attribute.substitute : '{name}'
                County                     as secondaryRegion,
                @ODM.codelist
                Country                    as country,
                PostalCode                 as postCode,
                //DeliveryServiceNumber      as deliveryServiceNumber,
                CompanyPostalCode          as companyPostalCode,
                PoBoxIsWithoutNumber       as postBoxIsWithoutNumber,
                alternative,
                @ODM.codelist
                AddressTimeZone            as timeZone,
                AdditionalCityName         as additionalCityName,
                @mdm.parent
                owner,
                Building                   as building

        };


    view CustomerInformation as
        select from BusinessPartnerModel.Customer
        mixin {
            owner              : Association to one BusinessPartner
                                     on owner.customerInformation = $self;
            salesArrangements  : Association to many CustomerSalesArrangement
                                     on salesArrangements.parent_id = Id;
            taxClassifications : Association to many CustomerTaxClassification
                                     on taxClassifications.parent_id = Id;
        }
        into {
                @mdm.ignore
            key Id                           as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id                    as parent_id,
                @ODM.codelist
                OrderIsBlockedForCustomer    as orderBlockedReason,
                @ODM.codelist
                DeliveryIsBlockedForCustomer as deliveryBlockedReason,
                @ODM.codelist
                BillingIsBlockedForCustomer  as billingBlockedReason,
                @ODM.codelist
                CustomerClassification       as customerClassification,
                CustomerCorporateGroup       as customerCorporateGroup,
                @ODM.codelist
                CustomerAccountGroup         as customerAccountGroup,
                IsMarkedForDeletion          as isMarkedForDeletion,
                @ODM.codelist
                NielsenRegion                as nielsenRegion,
                SalesBlockForCustomer        as salesBlockForCustomer,
                ExpressTrainStationName      as expressTrainStationName,
                FiscalAddress                as fiscalAddress,
                BPIsEqualizationTaxSubject   as isEqualizationTaxSubject,
                VATLiability                 as vatLiability,
                AlternativePayerIsAllowed    as alternativePayerIsAllowed,
                PlannedAnnualSalesYear       as plannedAnnualSalesYear,
                PlannedAnnualSalesCurrency   as plannedAnnualSalesCurrency,
                PlannedAnnualSalesAmount     as plannedAnnualSalesAmount,
                @ODM.codelist
                DataExchangeInstruction      as dataExchangeInstruction,
                @ODM.codelist
                CustomerConditionGroup1      as customerConditionGroup1,
                @ODM.codelist
                CustomerConditionGroup2      as customerConditionGroup2,
                @ODM.codelist
                CustomerConditionGroup3      as customerConditionGroup3,
                @ODM.codelist
                CustomerConditionGroup4      as customerConditionGroup4,
                @ODM.codelist
                CustomerConditionGroup5      as customerConditionGroup5,
                @ODM.codelist
                BR_PartnerCFOPCategory       as cfopCategory,
                PostingIsBlocked             as postingIsBlocked,
                CustomerTradingPartnerID     as customerTradingPartnerId,
                @ODM.codelist
                IndustryCode1                as industryCode1,
                @ODM.codelist
                IndustryCode2                as industryCode2,
                @ODM.codelist
                IndustryCode3                as industryCode3,
                @ODM.codelist
                IndustryCode4                as industryCode4,
                @ODM.codelist
                IndustryCode5                as industryCode5,
                FiscalYearVariant            as fiscalYearVariant,
                @ODM.codelist
                AccountTaxType               as accountTaxType,
                CustomerExtensionCode01      as customerExtensionCode01,
                CustomerExtensionCode02      as customerExtensionCode02,
                CustomerExtensionCode03      as customerExtensionCode03,
                CustomerExtensionCode04      as customerExtensionCode04,
                CustomerExtensionCode05      as customerExtensionCode05,
                CustomerExtensionCode06      as customerExtensionCode06,
                CustomerExtensionCode07      as customerExtensionCode07,
                CustomerExtensionCode08      as customerExtensionCode08,
                CustomerExtensionCode09      as customerExtensionCode09,
                CustomerExtensionCode10      as customerExtensionCode10,
                RepresentativeName           as representativeName,
                BusinessType                 as businessType,
                IndustryType                 as industryType,
                @ODM.codelist
                DataMediumExchangeIndicator  as dataMediumExchangeIndicator,
                //association to saleOrg
                @mdm.parent
                owner,
                salesArrangements,
                taxClassifications
        };

    view CustomerSalesArrangement as
        select from BusinessPartnerModel.SalesArea
        mixin {
            owner        : Association to one CustomerInformation
                               on owner.salesArrangements = $self;
            salesAreaRef : Association to one SalesArea
                               on salesAreaRef.id = Id;
            functions    : Association to many CustomerPartnerFunction
                               on functions.parent_id = Id;

        }
        into {
                @mdm.ignore
            key Id                           as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id                    as parent_id,
                @mdm.parent
                owner,
                @ODM.codelist
                OrderIsBlockedForCustomer    as orderBlockedReason,
                @ODM.codelist
                DeliveryIsBlockedForCustomer as deliveryBlockedReason,
                @ODM.codelist
                BillingIsBlockedForCustomer  as billingBlockedReason,
                @ODM.codelist
                IncotermsClassification      as incotermsClassification,
                IncotermsTransferLocation    as incotermsTransferLocationName,
                SalesOffice                  as salesOfficeDisplayId,
                SalesGroup                   as salesGroupDisplayId,
                SalesBlockForCustomer        as salesBlockForCustomer,
                CompleteDeliveryIsDefined    as completeDeliveryIsDefined,
                salesAreaRef,
                //PartialDeliveryIsAllowed     as isDeliveryInChunksAllowed,
                //isDeliveryCombinationAllowed,
                //maxCountDeliveryChunks,
                @ODM.codelist
                DeliveryPriority             as deliveryPriority,
                @ODM.codelist
                Currency                     as currency,
                // @ODM.codelist
                // PaymentTerms                 as paymentTerms,
                @ODM.codelist
                CustomerGroup                as salesArrangementGroup,
                @ODM.codelist
                CustomerPriceGroup           as salesArrangementPriceGroup,
                IsMarkedForDeletion          as isMarkedForDeletion,
                functions

        };

    view SalesArea as
        select from BusinessPartnerModel.SalesArea
        mixin {
            owner : Association to one CustomerSalesArrangement
                        on owner.salesAreaRef = $self;
        //salesOffices: Association to many SalesArea2SalesOffice on salesOffices.id = Id;
        }
        into {
                @mdm.ignore
            key Id                  as id,
                @mdm.odm.semantic.key
                SalesOrganization   as salesOrganizationDisplayId,
                @mdm.odm.semantic.key
                Division            as division,
                @mdm.odm.semantic.key
                DistributionChannel as distributionChannel,
                @mdm.parent
                owner
        };

    view CustomerPartnerFunction as
        select from BusinessPartnerModel.CustomerPartnerFunction
        mixin {
            owner : Association to one CustomerSalesArrangement
                        on owner.functions = $self;
        }
        into {
                @mdm.ignore
            key Id                 as id,
                @mdm.parent.entity.column : 'Id'
                @mdm.ignore
                Parent_Id          as parent_id,
                @mdm.odm.semantic.key
                @ODM.codelist
                PartnerFunction    as functionCode,
                // PartnerFunction    as functionName, //to be removed after ODM change
                DefaultPartner     as isDefault,
                PartnerType        as functionPartnerType,
                PartnerDescription as partnerDescription,
                @mdm.odm.semantic.key
                PartnerNumber      as partnerNumber,
                @mdm.parent
                owner
        };

    view SupplierInformation as
        select from BusinessPartnerModel.Supplier
        mixin {
            owner                  : Association to one BusinessPartner
                                         on owner.supplierInformation = $self;
            accountingInformation  : Association to many SupplierAccountingInformation
                                         on accountingInformation.parent_id = Id;

            purchasingArrangements : Association to many SupplierPurchasingArrangement
                                         on purchasingArrangements.parent_id = Id;
        }
        into {
                @mdm.ignore
            key Id                          as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id                   as parent_id,
                PostingIsBlocked            as isPostingBlocked,
                PurchasingIsBlocked         as isPurchasingBlocked,
                PaymentIsBlockedForSupplier as isPaymentBlocked,
                VATLiability                as vatLiability,
                DeletionIndicator           as deletionIndicator,
                @ODM.codelist
                SupplierAccountGroup        as maintenanceProfile,
                @ODM.codelist
                ResponsibleType             as responsibleType,
                accountingInformation,
                purchasingArrangements,
                @mdm.parent
                owner
        };

    view SupplierPurchasingArrangement as
        select from BusinessPartnerModel.SupplierPurchasingOrg
        mixin {
            owner     : Association to one SupplierInformation
                            on owner.purchasingArrangements = $self;
            functions : Association to many SupplierPartnerFunction
                            on functions.parent_id = Id;
        }
        into {
                @mdm.ignore
            key Id                             as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id                      as parent_id,
                @mdm.odm.semantic.key
                PurchasingOrganization         as purchasingOrganizationDisplayId,
                PurchasingGroup                as purchasingGroupDisplayId,
                @ODM.codelist
                PurchaseOrderCurrency          as currency,
                //   @ODM.codelist
                //   PaymentTerms                   as paymentTerms,
                @ODM.codelist
                IncotermsClassification        as incotermsClassification,
                IncotermsTransferLocation      as incotermsTransferLocationName,
                @ODM.codelist
                CalculationSchemaGroupCode     as calculationSchema,
                PurchasingIsBlockedForSupplier as isPurchasingBlocked,
                DeletionIndicator              as isMarkedForDeletion,
                PurOrdAutoGenerationIsAllowed  as isAutoGenerationOfPurchaseOrdersAllowed,
                @ODM.codelist
                SupplierABCClassificationCode  as classification,
                functions,
                owner
        };

    view SupplierAccountingInformation as
        select from BusinessPartnerModel.SupplierCompany
        mixin {
            owner            : Association to one SupplierInformation
                                   on owner.accountingInformation = $self;
            withholdingTaxes : Association to many SupplierBusinessPartnerWhldgTax
                                   on withholdingTaxes.parent_id = Id;
            paymentMethods   : Association to many paymentMethods
                                   on paymentMethods.id = Id;
        }
        into {
                @mdm.ignore
            key Id                             as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id                      as parent_id,
                @mdm.odm.semantic.key
                CompanyCode                    as companyCodeDisplayId,
                ReconciliationAccount          as reconciliationAccountNumber,
                @ODM.codelist
                LayoutSortingRule              as invoiceSortingOrder,
                DeletionIndicator              as isMarkedForDeletion,
                SupplierIsBlockedForPosting    as isPostingBlocked,
                @ODM.codelist
                PaymentBlockingReason          as paymentBlockingReason,
                PaymentTerms                   as paymentTermCode,
                @ODM.codelist
                MinorityGroup                  as minorityGroup,
                IsDoubleInvoice                as isDoubleInvoice,
                HouseBank                      as houseBank,
                CashPlanningGroup              as cashPlanningGroup,
                AccountingClerkInternetAddress as accountingClerkInternetAddress,
                //AlternativePayee               as isAlternativePayeeUsed,
                // AccountingClerk as accountingClerkInitialsCode,
                paymentMethods,
                withholdingTaxes,
                @parent
                owner
        };

    view paymentMethods as
        select from BusinessPartnerModel.SupplierCompany
        mixin {
            owner : Association to one SupplierAccountingInformation
                        on owner.paymentMethods = $self;
        }
        into {
                @mdm.ignore
            key Id                 as id,
                @ODM.codelist
                PaymentMethodsList as paymentMethod,
                @mdm.parent
                owner
        };

    view SupplierBusinessPartnerWhldgTax as
        select from BusinessPartnerModel.BusinessPartnerWhldgTax
        mixin {
            owner     : Association to one SupplierAccountingInformation
                            on owner.withholdingTaxes = $self;
            exemption : Association to one SupplierAccountingWithholdingTaxExemption
                            on exemption.id = Id;
        }
        into {
                @mdm.ignore
            key Id                   as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id            as parent_id,
                @mdm.odm.semantic.key
                @ODM.codelist
                WithholdingTaxType   as type,
                @ODM.codelist
                WithholdingTaxCode   as subType,
                WithholdingTaxNumber as taxNumber,
                @ODM.codelist
                RecipientType        as recipientType,
                exemption,
                @parent
                owner
        };

    view SupplierAccountingWithholdingTaxExemption as
        select from BusinessPartnerModel.BusinessPartnerWhldgTax
        mixin {
            owner : Association to one SupplierBusinessPartnerWhldgTax
                        on owner.exemption = $self;
        }
        into {
                @mdm.ignore
            key Id                         as id,
                @mdm.ignore
            key Parent_Id                  as parent_id,
                WithholdingTaxCertificate  as certificateNumber,
                ExemptionDateBegin         as validFrom,
                ExemptionDateEnd           as validTo,
                @ODM.codelist
                ExemptionReason            as reason,
                WithholdingTaxExmptPercent as percentage,
                @parent
                owner

        };

    view SupplierPartnerFunction as
        select from BusinessPartnerModel.SupplierPartnerFunction
        mixin {
            owner : Association to one SupplierPurchasingArrangement
                        on owner.functions = $self;
        }
        into {
                @mdm.ignore
            key Id                 as id,
                @mdm.parent.entity.column : 'Id'
                @mdm.ignore
            key Parent_Id          as parent_id,
                @mdm.odm.semantic.key
                @ODM.codelist
                PartnerFunction    as functionCode,
                // PartnerFunction    as functionName, //to be removed after ODM change
                DefaultPartner     as isDefault,
                PartnerType        as functionPartnerType,
                PartnerDescription as partnerDescription,
                @mdm.odm.semantic.key
                PartnerNumber      as partnerNumber,
                @mdm.parent
                owner

        };

    view Industry as
        select from BusinessPartnerModel.IndustrySector
        mixin {
            owner : Association to many OrganizationDetails
                        on owner.industries = $self;
        }
        into {
                @mdm.ignore
            key Id                 as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id          as parent_id,
                IsDefaultIndustry  as isStandardIndustry,
                @ODM.codelist
                @mdm.odm.semantic.key
                IndustrySector     as industrySector,
                @ODM.codelist
                @mdm.odm.semantic.key
                IndustrySystemType as industrySystemType,
                owner

        };

    view CustomerTaxClassification as
        select from BusinessPartnerModel.SalesTax
        mixin {
            owner : Association to many CustomerInformation
                        on owner.taxClassifications = $self;
        }
        into {
                @mdm.ignore
            key Id                as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id         as parent_id,
                @mdm.odm.semantic.key
                @ODM.codelist
                Country           as country,
                @mdm.odm.semantic.key
                @ODM.codelist
                TaxCategory       as taxCategory,
                @mdm.odm.semantic.key
                @ODM.codelist
                TaxClassification as taxClassification,
                owner
        };

    view odm_bp as
        select from BusinessPartnerModel.BusinessPartner {
            key Id as id
        };

    view BusinessPartnerGroupDetails as
        select from BusinessPartnerModel.BusinessPartnerGroup
        mixin {
            owner : Association to one BusinessPartner
                        on owner.businessPartnerGroup = $self;
        }
        into {
                @mdm.ignore
            key Id                        as id,
                @mdm.ignore
                @mdm.parent.entity.column : 'Id'
            key Parent_Id                 as parent_id,
                @mdi.attribute.substitute : '{name}'
                BusinessPartnerGroupName1 as primaryGroupName,
                @mdi.attribute.substitute : '{name}'
                BusinessPartnerGroupName2 as secondaryGroupName,
                @ODM.codelist
                BusinessPartnerGroupType  as groupType,
                @ODM.codelist
                FormOfAddress             as formOfAddress,
                @mdm.parent
                owner
        };


};
