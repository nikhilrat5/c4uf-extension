namespace sap.odm.sales;

using { sap.odm.sales.CustomerOrderBlockingReasonCode } from './CustomerOrderBlockingReasonCodes.cds';
using { sap.odm.sales.CustomerDeliveryBlockingReasonCode } from './CustomerDeliveryBlockingReasonCodes.cds';
using { sap.odm.sales.CustomerBillingBlockingReasonCode } from './CustomerBillingBlockingReasonCodes.cds';
using {
  sap.odm.sales.s4.CustomerSalesArrangementFunction as S4CustomerSalesArrangementFunction,
  sap.odm.sales.s4.CustomerSalesArrangement as S4CustomerSalesArrangement,
  sap.odm.sales.s4.CustomerInformation as S4CustomerInformation
} from './s4/Customer.cds';
using { sap.odm.common.ShortString } from '../common/types.cds';
using { sap.odm.sales.SalesPartnerRoleCode } from './SalesPartnerRoleCodes.cds';
using { sap.odm.businesspartner.BusinessPartner } from '../businesspartner/BusinessPartner.cds';
using { sap.odm.workforce.WorkforcePerson } from '../workforce/WorkforcePerson.cds';
using { sap.odm.sales.Incoterms } from './common.cds';
using { sap.odm.sales.shipping.DeliveryPriorityCode } from './shipping/DeliveryPriorityCodes.cds';
using { sap.odm.common.CurrencyCode } from '../common/CurrencyCodes.cds';
using { sap.odm.sales.CustomerSalesArrangementGroupCode } from './CustomerSalesArrangementGroupCodes.cds';
using { sap.odm.sales.CustomerSalesArrangementPriceGroupCode } from './CustomerSalesArrangementPriceGroupCodes.cds';
using { sap.odm.common.CountryCode } from '../common/CountryCodes.cds';
using { sap.odm.finance.TaxCategoryCode } from '../finance/TaxCategoryCodes.cds';
using { sap.odm.sales.CustomerTaxClassificationCode } from './CustomerTaxClassificationCodes.cds';

/**
 * Blocking information about the customer and its child
 * entities.
 */
aspect BlockingInformation {
  /**
   * Indicates if ordering by the customer is blocked.
   */
  isOrderBlocked: Boolean;
  /**
   * Reason for blocking customer order.
   */
  orderBlockedReason: CustomerOrderBlockingReasonCode;
  /**
   * Indicates if delivery to the customer is blocked.
   */
  isDeliveryBlocked: Boolean;
  /**
   * Reason for blocking the delivery to the customer.
   */
  deliveryBlockedReason: CustomerDeliveryBlockingReasonCode;
  /**
   * Indicates if billing to the customer is blocked.
   */
  isBillingBlocked: Boolean;
  /**
   * Reason for blocking billing to the customer.
   */
  billingBlockedReason: CustomerBillingBlockingReasonCode;
};

/**
 * Types of function partners of a customer sales arrangement.
 */
type CustomerSalesArrangementFunctionPartnerTypeEnum: String(30) enum {
  /**
   * Indicates that the function partner is a contact person.
   */
  functionPartnerContactPerson;
  /**
   * Indicates that the function partner is a customer.
   */
  functionPartnerCustomer;
  /**
   * Indicates that the function partner is a supplier.
   */
  functionPartnerSupplier;
  /**
   * Indicates that the function partner is a workforce person.
   */
  functionPartnerWorkforcePerson;
} ;

/**
 * Business process related partner function of the customer
 * sales arrangement.
 */
aspect CustomerSalesArrangementFunction: S4CustomerSalesArrangementFunction  {
  /**
   * The name of the Function. Serves as key.
   */
  key functionName: ShortString;
  /**
   * The code of the sales arrangement function.
   */
  functionCode: SalesPartnerRoleCode;
  /**
   * Indicates if the function is the default for the associated
   * customer sales arrangement.
   */
  isDefault: Boolean;
  /**
   * Type of function partner for the customer's sales
   * arrangement.
   */
  functionPartnerType: CustomerSalesArrangementFunctionPartnerTypeEnum;
  /**
   * Indicates that the function partner is a contact person.
   */
  functionPartnerContactPerson: association to one BusinessPartner;
  /**
   * Indicates that the function partner is a workforce person.
   */
  functionPartnerWorkforcePerson: association to one WorkforcePerson;
};

/**
 * An arrangement between a sales organization and a customer
 * that is used for sales transactions. This arrangement
 * contains information, for example, about payment terms,
 * blocking information, and incoterms.
 */
aspect CustomerSalesArrangement: BlockingInformation, Incoterms, S4CustomerSalesArrangement  {
  /**
   * Sales Area reference for which the sales arrangement is
   * valid.
   */
  key salesAreaRef: {
    /**
     * Human-readable identifier of the sales organization.
     */
    salesOrganizationDisplayId: String(4);
    /**
     * Distribution channel.
     */
    distributionChannel: String(2);
    /**
     * Division the sales area is assigned to.
     */
    division: String(2);
  };
  /**
   * Indicates whether deliveries of the sales arrangement are
   * allowed to be combined with other deliveries.
   */
  isDeliveryCombinationAllowed: Boolean;
  /**
   * Indicates whether multiple deliveries are allowed for the
   * sales arrangement.
   */
  isDeliveryInChunksAllowed: Boolean;
  /**
   * Specifies the maximum number of delivery chunks for the
   * sales arrangement.
   */
  maxCountDeliveryChunks: Integer;
  /**
   * Priority of deliveries of the sales arrangement.
   */
  deliveryPriority: DeliveryPriorityCode;
  /**
   * A code that represents the currency for customer orders of
   * the sales arrangement.
   */
  currency: CurrencyCode;
  /**
   * Identifies a particular group of customer sales arrangements
   * (for example, wholesale or retail) for the purpose of
   * pricing or generating statistics.
   */
  salesArrangementGroup: CustomerSalesArrangementGroupCode;
  /**
   * A group of customer sales arrangements which share the same
   * pricing requirements.
   */
  salesArrangementPriceGroup: CustomerSalesArrangementPriceGroupCode;
  /**
   * Functions of the customer sales arrangement.
   */
  functions: composition of many CustomerSalesArrangementFunction;
  /**
   * Indicates whether the customer is marked for deletion.
   */
  isMarkedForDeletion: Boolean;
};

/**
 * Tax classification of the customer.
 */
@PersonalData.EntitySemantics: 'DataSubjectDetails'
aspect CustomerTaxClassification {
  /**
   * Country for which the tax classification is valid.
   */
  @PersonalData.IsPotentiallyPersonal: true
  key country: CountryCode;
  /**
   * Identifies the condition that the system uses to
   * automatically determine country-specific taxes during
   * pricing.
   */
  @PersonalData.IsPotentiallyPersonal: true
  key taxCategory: TaxCategoryCode;
  /**
   * Specifies the tax liability of the customer, based on the
   * tax structure of the customer's country.
   */
  @PersonalData.IsPotentiallyPersonal: true
  taxClassification: CustomerTaxClassificationCode;
};

/**
 * Sales related information about a business partner.
 */
@PersonalData.EntitySemantics: 'DataSubjectDetails'
aspect CustomerInformation: BlockingInformation, S4CustomerInformation  {
  /**
   * Sales arrangements of a customer.
   */
  salesArrangements: composition of many CustomerSalesArrangement;
  /**
   * Tax classifications of a customer.
   */
  taxClassifications: composition of many CustomerTaxClassification;
};
